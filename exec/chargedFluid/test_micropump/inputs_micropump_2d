&probin_common
 
  ! Problem specification
  !----------------------
  dim_in = 2                            ! 2D or 3D
  prob_type =  2                        ! see src_lowMach/init_lowmach.f90

  prob_lo(1:3) = 0. 0. 0.               ! physical lo coordinate
  prob_hi(1:3) = 0.0064d0 0.0064d0 0.0001d0 ! physical hi coordinate
  n_cells(1:2) = 64 64                  ! number of cells in domain
  max_grid_size(1:2) = 32 32            ! max number of cells in a box

  fixed_dt = 5.d-6                      ! time step

  max_step = 10000                     ! maximum number of time steps
  plot_int = 100                       ! Interval for writing a plotfile (for visit/amrvis)
  plot_base_name = "plt"                ! prefix for plotfile name
  chk_int = -1                          ! Interval for writing a checkpoint
  check_base_name = "chk"               ! prefix for checkpoint name
  restart = -1                          ! checkpoint restart number
  print_int = 1                         ! how often to output EOS drift and sum of conserved quantities
  project_eos_int = 10                  ! how often to call project_onto_eos

  ! Physical properties
  !----------------------
  grav(1:3) = 0. 0. 0.                  ! gravity vector (negative is downwards)
  nspecies = 5                          ! number of species H+ OH- H2O2 O2 H2O 

  molmass(1:5) = 1.673723708457240d-24 2.824244779792520d-23 5.648273689511320d-23 5.313392783619530d-23 2.991507555062350d-23

  rhobar(1:5) = 1.d0 1.d0 1.d0 1.d0 1.d0
  rho0 = 1.                             ! reference density
  
  ! stochastic properties
  variance_coef_mom = 0.                ! global scaling epsilon for stochastic momentum forcing
  variance_coef_mass = 0.               ! global scaling epsilon for stochastic mass forcing
  k_B = 1.3806488e-16                   ! Boltzmann's constant
  Runiv = 8.314462175e7                 ! Universal gas constant (not used)
  
  ! Algorithm control / selection
  !----------------------
  algorithm_type = 6                    ! 6 = Boussinesq
  barodiffusion_type = 0                ! 0 = no barodiffusion type

  use_bl_rng = F                        ! if false, use HydroGrid RNGs
                                        ! if true, use F_BaseLib/bl_random RNGs

  ! random number seed (for HydroGrid RNGs)
  ! 0        = unpredictable seed based on clock
  ! positive = fixed seed
  seed = 0 

  ! Random number seeds for each physical process for use_bl_rng=T
  ! for positive value, the value is assigned as seed value
  ! for 0, a positive value is randomly chosen
  ! if -1 (only for restart), RNGs status is restored from checkpoint data
  seed_momentum = 0 
  seed_diffusion = 0
  seed_reaction = 0
  seed_init = 0

  ! Viscous friction L phi operator
  ! if abs(visc_type) = 1, L = div beta grad
  ! if abs(visc_type) = 2, L = div [ beta (grad + grad^T) ]
  ! if abs(visc_type) = 3, L = div [ beta (grad + grad^T) + I (gamma - (2/3)*beta) div ]
  ! positive = assume constant coefficients
  ! negative = assume spatially-varying coefficients
  visc_type = 2
  visc_coef = 0.01002                   ! momentum diffusion coefficient 'eta'   

  advection_type = 2                    ! 0 = centered explicit
                                        ! 1 = unlimited bilinear bds in space and time
                                        ! 2 = limited bliniear bds in space and time
                                        ! 3 = unlimited quadratic bds in space and time
                                        ! 4 = limited quadratic bds in space and time

  filtering_width = 0                   ! If positive the random numbers will be filtered to smooth out the field s
  stoch_stress_form = 1                 ! 0=nonsymmetric (div(v)=0), 1=symmetric (no bulk)

  ! Initial conditions
  !----------------------
  u_init(1:2) = 0. 0.                   ! controls initial velocity

  perturb_width = 0.                    ! not used

  ! for prob_type=3, smoothing_width is interpreted as:
  ! positive is a tanh smoothed interface where smoothing width is approx the # of grid cells
  ! between 0 and -1 is random perturbation where rand = abs(smoothing_width)*rand() and then
  !  c = rand*c_init(1,:) + (1-rand)*c_init(2,:)
  ! -2 is sinusoidal
  smoothing_width = -2.d0               ! scale factor for smoothing initial profile

  initial_variance_mom = 0.                 ! multiplicative factor for initial fluctuations
                                        ! (if negative, total momentum is set to zero -- relevant for periodic)

  ! Boundary conditions
  !----------------------
  ! BC specifications:
  ! -1 = periodic
  ! 100 = no-slip wall      (Dir condition for normal vel; Dir velocity condition for trans vel)
  ! 101 = no-slip reservoir (Dir condition for normal vel; Dir velocity condition for trans vel)
  ! 200 = slip wall         (Dir condition for normal vel; Dir traction condition for trans vel)
  ! 201 = slip reservoir    (Dir condition for normal vel; Dir traction condition for trans vel)
  ! For a complete list see bc.f90
  bc_lo(1:2) = -1 100
  bc_hi(1:2) = -1 101

  ! Control for analyze_spectra.90
  !----------------------

  hydro_grid_int = 0                    ! How often to call updateHydroGrid
                                        ! 0 if never
                                        ! negative for projectHydroGrid custom analysis
                                        ! positive for updateHydroGrid

  project_dir = 1                       ! Projection direction (1=x, 2=y, 3=z)
  ! Meaning: 0=analyze 3D data only (no projection needed for HydroGrid, 
  !          but still need projection if stats_int>0)
  ! +dim=project along dim then analyze 2D only,
  ! -dim=analyze 3D and then project along dim so we also analyze 2D data
  ! It is better to use the conserved variables but it does not quite work for staggered

  max_grid_projection(1:2) = 32 32      ! parallelization parameters
  stats_int = 0                         ! Project grid for analysis
                                        ! If positive, how often to compute mean and 
                                        ! standard deviation over reduced dimensions
  n_steps_save_stats = 200              ! How often to dump HydroGrid output files
  n_steps_skip = 0                      ! How many steps to skip
  analyze_conserved = F                 ! Should we use conserved variables for the analysis
                                        ! (does not work well)
  center_snapshots = F                  ! Should we use cell-centered momenta for the analysis
                                        ! (will smooth fluctuations)
  histogram_unit = -1                   ! If positive, write the values of the densities to a file for histogramming
  density_weights = 0.                  ! if nonzero, compute rho <- \sum w_i * rho_i for HydroGrid analysis
/

&probin_multispecies

  fraction_tolerance = 1.e-14           ! For roundoff errors in mass and mole fractions
  start_time = 0.

  ! Algorithmic options:
  !----------------------
  use_lapack = F                        ! Use LAPACK or iterative method for diffusion matrix (recommend False)
  inverse_type = 1                      ! Only for LAPACK:  1=inverse, 2=pseudo inverse
  correct_flux = T                      ! Manually ensure mass is conserved to roundoff 
  print_error_norms = T
  chi_iterations = 10                   ! number of iterations used in Dbar2chi_iterative
  plot_stag = F                         ! plot staggered velocities in separate plotfile
  
  ! Physical properties:
  !----------------------
  is_ideal_mixture = T                  ! If T assume Gamma=I (H=0) and simplify
  is_nonisothermal = F                  ! If T Soret effect will be included
  
  ! Thermodynamic and transport properties:
  !----------------------
  
  ! These are lower-triangules of symmetric matrices represented as vectors
  ! Number of elements is (nspecies*(nspecies-1)/2)
  ! The values are red row by row starting from top going down (this allows easy addition/deletion of new species/rows)
  ! So             D_12;   D_13,   D_23;   D_14,   D_24,  D_34;  D_15,  D_25,  D_35,  D_45
  Dbar(1:10) = 2.143d-4 2.67d-5 1.52d-5 8.09d-5 4.61d-5 5.7d-6 9.3d-5 5.3d-5 6.6d-6 2.0d-5 
                                        ! Maxwell-Stefan diffusion constant  
  H_offdiag(1:1) = 0.                   ! Off diagonal elements of H=d^2F/dx^2  

  ! These are vectors of length nspecies
  Dtherm(1:1) = 0.                      ! thermo-diffusion coefficients, only differences among elements matter
  H_diag(1:1) = 0.                      ! Diagonal of H=d^2F/dx^2  
  
  ! Initial and boundary conditions 
  !----------------------
  T_init(1:2) = 293. 293.               ! initial values for temperature (bottom/top, inside/outside circle, etc.)
  temp_type = 0                         ! for initializing temperature

  ! initial values for c
  ! The last value for water will be overwritten to enforce the EOS
  ! These are MASS FRACTIONS (concentrations), not partial densities
  c_init(1,1:5) = 5.668063153123600d-10 9.56430125883746d-9 1.d-2 6.4d-6 9.899934380449800d-1
  c_init(2,1:5) = 5.668063153123600d-10 9.56430125883746d-9 1.d-2 6.4d-6 9.899934380449800d-1

  ! c_i boundary conditions (dir,lohi,species)
  ! These are MASS FRACTIONS (concentrations), not partial densities

  ! use this for the lower wall (Neumann Values)
  c_bc(2,1,1:5) = 0. 0. 0. 0. 0.

  ! use this for the upper reservoir (Dirichlet Values)
  c_bc(2,2,1:5) = 5.668063153123600d-10 9.56430125883746d-9 1.d-2 6.4d-6 9.899934380449800d-1

  midpoint_stoch_mass_flux_type = 1     ! 1 = Strato
                                        ! 2 = Ito

  avg_type = 1                          ! 1 = arithmetic (with C0-Heaviside)

  mixture_type = 0                      ! Model for how transport and thermodynamic coefficients depend on composition
/

&probin_charged
  use_charged_fluid  = T
  dielectric_const   = 6.91d-19    ! relative permitivity ~ 78, vacuum permitivity ~ 8.854d-21
  dielectric_type    = 0      ! 0 = assumes constant epsilon
                              ! 1 = (1+c1)*dielectric_const
                              ! see fluid_charge.f90:compute_permittivity()
  charge_per_mass(1:5) = 96441.d0 -5673.d0 0.d0 0.d0 0.d0

  ! 1 = Dirichlet (fixed potential)
  ! 2 = Neumann (fixed charge density)
  Epot_wall_bc_type(1,2) = 1
  Epot_wall_bc_type(2,2) = 1

  ! Dirichlet or Neumann condition
  Epot_wall(1,2) = 0.d0
  Epot_wall(2,2) = 0.d0

  electroneutral = F
/

&probin_chemistry

  nreactions = 2                      ! number of reactions

  ! stoichiometric factors for each reaction (species,LHS(1)/RHS(2),reaction)
  ! Example: For N1 + 2*N2 -> N3 use
  ! stoichiometric_factors(1:3,1,1) = 1 2 0
  ! stoichiometric_factors(1:3,2,1) = 0 0 1
  ! Cathode (center of domain) 2H+ + H2O2 -> 2 H2O
  stoichiometric_factors(1:5,1,1) = 2 0 1 0 0
  stoichiometric_factors(1:5,2,1) = 0 0 0 0 2
  ! Anonde (outer domain) H2O2 -> 2H+ + O2 + 2e-
  stoichiometric_factors(1:5,1,2) = 0 0 1 0 0
  stoichiometric_factors(1:5,2,2) = 2 0 0 1 0

  ! reaction rate constant for each reaction (assuming Law of Mass Action holds)
  ! using rate_multiplier, reaction rates can be changed by the same factor
  ! if include_discrete_LMA_correction, n^2 and n^3 in rate expressions become
  ! n*(n-1/dv) and n*(n-/dv)*(n-2/dv).

  rate_const(1:2) = 2.757389865405490d-35 8.d-8

  rate_multiplier = 1.d0
  include_discrete_LMA_correction = T

  ! if n is positive, exclude species n (=solvent) when computing reaction rates
  ! in this case, the concentration of the solvent is assumed to be constant,
  ! which should be reflected on rate constants.
  ! if 0, no species is excluded
  ! e.g. U + S -> 2U, if exclude_solvent_comput_rates=0, rate=k*n_U*n_S
  !                   if exclude_solvent_comput_rates=2, rate=k_new*n_U where k_new=k*n_S
  exclude_solvent_comput_rates = 0

  ! how to sample chemical production rates
  use_Poisson_rng = -1                  ! 2=SSA
                                        ! 1=do tau leaping (Poisson increments)
                                        ! 0= do CLE (Gaussian increments)
                                        ! -1=do deterministic chemistry

/

&probin_gmres

  ! preconditioner type
  ! 1 = projection preconditioner
  !-1 = projection preconditioner with expensive pressure update
  ! 2 = lower triangular preconditioner
  !-2 = lower triangular preconditioner with negative sign
  ! 3 = upper triangular preconditioner
  !-3 = upper triangular preconditioner with negative sign
  ! 4 = Block diagonal preconditioner
  !-4 = Block diagonal preconditioner with negative sign
  precon_type = 1

  ! weighting of pressure when computing norms and inner products
  p_norm_weight = 1.

  ! scale theta_alpha, beta, gamma, and b_u by this, and then scale x_p by the inverse
  scale_factor = 1.

  ! MAC projection solver parameters:
  mg_verbose = 0                        ! multigrid verbosity
  cg_verbose = 0                        ! BiCGStab (mg_bottom_solver=1) verbosity
  mg_max_vcycles = 1                    ! maximum number of V-cycles
  mg_minwidth = 2                       ! length of box at coarsest multigrid level
  mg_bottom_solver = 4                  ! bottom solver type
                                        ! 0 = smooths only, controlled by mg_nsmooths_bottom
                                        ! 1 = BiCGStab
                                        ! 4 = Fancy bottom solve that coarsens down additionally
                                        !     and then applies mg_nsmooths_bottom smooths
  mg_nsmooths_down = 2                  ! number of smooths at each level on the way down
  mg_nsmooths_up = 2                    ! number of smooths at each level on the way up
  mg_nsmooths_bottom = 8                ! number of smooths at the bottom (only if mg_bottom_solver=0)
  mg_max_bottom_nlevels = 10            ! for mg_bottom_solver=4, number of additional levels of multigrid
  mg_rel_tol = 1.e-9                    ! relative tolerance stopping criteria

  ! Staggered multigrid solver parameters
  stag_mg_verbosity = 0                 ! verbosity
  stag_mg_max_vcycles = 1               ! max number of v-cycles
  stag_mg_minwidth = 2                  ! length of box at coarsest multigrid level
  stag_mg_bottom_solver = 4             ! bottom solver type
                                        ! 0 = smooths only, controlled by mg_nsmooths_bottom
                                        ! 4 = Fancy bottom solve that coarsens additionally
                                        !     and then applies stag_mg_nsmooths_bottom smooths
  stag_mg_nsmooths_down = 2             ! number of smooths at each level on the way down
  stag_mg_nsmooths_up = 2               ! number of smooths at each level on the way up
  stag_mg_nsmooths_bottom = 8           ! number of smooths at the bottom
  stag_mg_max_bottom_nlevels = 10       ! for stag_mg_bottom_solver=4, number of additional levels of multigrid
  stag_mg_omega = 1.d0                  ! weighted-jacobi omega coefficient
  stag_mg_smoother = 1                  ! 0 = jacobi; 1 = 2*dm-color Gauss-Seidel
  stag_mg_rel_tol = 1.e-9               ! relative tolerance stopping criteria

  ! GMRES solver parameters
  gmres_rel_tol = 1.e-9                 ! relative tolerance stopping criteria
  gmres_abs_tol = 0.                    ! absolute tolerance stopping criteria
  gmres_verbose = 0                     ! gmres verbosity; if greater than 1, more residuals will be printed out
  gmres_max_outer = 20                  ! max number of outer iterations
  gmres_max_inner = 5                   ! max number of inner iterations, or restart number
  gmres_max_iter = 100                  ! max number of gmres iterations
  gmres_min_iter = 1                    ! min number of gmres iterations

/

! HydroGrid spectral and other analysis
!---------------------------------------
! The variables are numbered as:
! 3D: 1=rho, 2-4=v, 5=T, 6 onward=rho_1-rho_n or w_1-w_n
! 2D: 1=rho, 2-3=v, 4=T, 5 onward=rho_1-rho_n or w_1-w_n

&hydroAnalysisOptions
! 3D full grid data
! NOT USED HERE sincr proj_dir>0!
! NOTE: This namelist will be ignored if project_dir>0

   staggeredVelocities = 0              ! Are velocities on a staggered grid or not, (0, +1, or -1)*h/2
   storeConserved = F                   ! We are not using conserved variables here due to staggering

   ! Save the flow to a VTK file:
   writeMeansVTK = F                    ! Save the means over the averaging interval
   writeSnapshotVTK = F                 ! Save snapshots of the instantaneous fields

   ! Variances
   writeVariancesVTK = F                ! Should we save a VTK file
   nVariances = 0
   variancePairs = ""
      ! species1 variable1 species2 variable2

   ! Static structure factors
   writeSpectrumVTK = F
   subtractMeanFT = F                   ! The means are trivial here so no need to estimate them
   writeAbsValue = T                    ! Only write absolute values of complex values to VTK file?
   writeTheory = -1                     ! Write the theoretical prediction (-1=none, 0==continuum or 1=MAC)
   nStructureFactors = 0
   structureFactorPairs = ""

   ! Dynamic structure factors:
   nWavenumbers=0
   ! Shape (2,nWavenumbers):
   selectedWavenumbers=""
   nSavedSnapshots=100
      
   outputFolder = "."
   filePrefix = "conv_fing_full"
   axisToPrint = 1 ! 1=x, 2=y, 3=z axis
   periodic = T ! Is the system periodic along the y axes

/

! This one is the one that computes spectra of the vstat files
&hydroAnalysisOptions
! 2D grid after vertical projection (corresponds to vstat files)
! NOTE: This namelist will be ignored if project_dir=0

   staggeredVelocities = 0              ! Are velocities on a staggered grid or not, (0, +1, or -1)*h/2
   storeConserved = F                   ! We are not using conserved variables here due to staggering

   ! Save the flow to a VTK file:
   writeMeansVTK = F                    ! Save the means over the averaging interval
   writeSnapshotVTK = F                 ! Save snapshots of the instantaneous fields

   ! Variances
   writeVariancesVTK = F                ! Should we save a VTK file
   nVariances = 0
   variancePairs = "0"
      ! species1 variable1 species2 variable2

   ! Static structure factors
   writeSpectrumVTK = T
   subtractMeanFT = F                   ! Important not to do this for only one sample since mean is not reliable
   writeAbsValue = T                    ! Only write absolute values of complex values to VTK file?
   writeTheory = -1                     ! Write the theoretical prediction (-1=none, 0==continuum or 1=MAC)
   nStructureFactors = 0
   ! numbering: 1=rho-rho
   structureFactorPairs = "0 1 0 1"

   ! Dynamic structure factors:
   nWavenumbers=0
   ! Shape (2,nWavenumbers):
   selectedWavenumbers=""
   nSavedSnapshots=100
      
   outputFolder = "."
   filePrefix = "conv_fing_vstat"
   axisToPrint = 3                      ! 1=x, 2=y, 3=z axis
   periodic = F                         ! Is the system fully periodic?
/

&hydroAnalysisOptions
! 1D grid after horizontal projection (corresponds to hstat files)
! This is the IMPORTANT one here
! NOTE: This namelist will be ignored if project_dir=0

   staggeredVelocities = 0              ! Are velocities on a staggered grid or not, (0, +1, or -1)*h/2
   storeConserved = F                   ! We are not using conserved variables here due to staggering

   ! Save the flow to a VTK file:
   writeMeansVTK = F                    ! Save the means over the averaging interval
   writeSnapshotVTK = F                 ! Save snapshots of the instantaneous fields

   ! Variances
   writeVariancesVTK = F                ! Should we save a VTK file
   nVariances = 0
   variancePairs = ""
      ! species1 variable1 species2 variable2

   ! Static structure factors
   writeSpectrumVTK = F
   subtractMeanFT = F                   ! The means are trivial here so no need to estimate them
   writeAbsValue = T                    ! Only write absolute values of complex values to VTK file?
   writeTheory = -1                     ! Write the theoretical prediction (-1=none, 0==continuum or 1=MAC)
   nStructureFactors = 1
   ! numbering: 1=rho-rho
   structureFactorPairs = "0 1 0 1"

   ! Dynamic structure factors:
   nWavenumbers=0
   ! Shape (2,nWavenumbers):
   selectedWavenumbers=""
   nSavedSnapshots=100
      
   outputFolder = "."
   filePrefix = "conv_fing_hstat"
   axisToPrint = 1 ! 1=x, 2=y, 3=z axis
   periodic = T ! Is the system fully periodic?
/
