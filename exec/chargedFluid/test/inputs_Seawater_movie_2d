! WARNING: gfortran has shown some issues reading matrices of rank higher than 2 from namelists
! be careful and check values are read correctly (e.g., c_bc)

! Options for low Mach equations
&probin_common
 
  ! Problem specification
  !----------------------
  dim_in = 2                       ! 2D or 3D  
  prob_lo(1:2) = 0.d0 0.d0         ! physical lo coordinate
  prob_hi(1:2) = 4.d-4 4.d-4         ! physical hi coordinate
  n_cells(1:2) = 128 128             ! number of cells in domain
  max_grid_size(1:2) = 64 64        ! max number of cells in a box

  ! Time-step control
  !----------------------
  fixed_dt = 5.d-11                 ! time step (if positive, fixed)
  ! Controls for number of steps between actions (for HydroGrid see below)
  !----------------------
  max_step = 10000              ! maximum number of time steps
  plot_int = 50             ! Interval for writing a plotfile (for visit/amrvis)
  chk_int = 0                      ! Interval for writing a checkpoint
  prob_type = 3                    ! sets scalars, m, coefficients (see init.f90)
  restart = -1                     ! checkpoint restart number
  print_int = 10                   ! how often to output EOS drift and sum of conserved quantities
  project_eos_int =  0             ! how often to call project_onto_eos

  ! Physical parameters
  !--------------------
  grav(1:2) = 0.d0 0.d0               ! gravity vector (negative is downwards)
  molmass(1:3) = 3.82d-23 5.89d-23 3.35d-23  ! sodium: 3.82e-23 g, Cl: 5.89e-23 g
  rhobar(1:3) =   3.17d0 3.17d0 1.d0

  ! stochastic forcing amplitudes (1 for physical values, 0 to run them off)
  variance_coef_mom =  2.5d4
  variance_coef_mass =  2.5d4
  k_B = 1.d0            ! Boltzmann's constant
  k_B = 1.3806488d-16       ! Boltzmann's constant
  

  ! Algorithm control / selection
  !----------------------
  algorithm_type = 0    ! differs from code to code.  In binary and multispcies code:
                         ! 0 = Inertial algorithm
                         ! 1 = Overdamped with 1 RNG
                         ! 2 = Overdamped with 2 RNGs

  barodiffusion_type = 0    ! 0 = no barodiffusion
                            ! 1 = fixed gradp from initialization
                            ! 2 = update gradp each time step

  ! random number seed
  ! 0        = unpredictable seed based on clock
  ! positive = fixed seed
  seed = 0

  ! Viscous friction L phi operator
  ! if abs(visc_type) = 1, L = div beta grad
  ! if abs(visc_type) = 2, L = div [ beta (grad + grad^T) ]
  ! if abs(visc_type) = 3, L = div [ beta (grad + grad^T) + I (gamma - (2/3)*beta) div ]
  ! positive = assume constant coefficients
  ! negative = assume spatially-varying coefficients
  visc_type = 2
  visc_coef = 1.05d-2         ! momentum diffusion coefficient 'eta'   

  advection_type = 0 ! 0 = centered explicit
                     ! 1 = unlimited bilinear bds in space and time
                     ! 2 = limited bliniear bds in space and time
                     ! 3 = unlimited quadratic bds in space and time
                     ! 4 = limited quadratic bds in space and time

  ! Stochastic momentum flux controls:
  filtering_width = 0   ! If positive the *momentum* stochastic fluxes will be filtered (smoothed)
                        ! Stochastic *mass* fluxes are not filtered
  stoch_stress_form = 1 ! 0=nonsymmetric (div(v)=0), 1=symmetric (no bulk)

  ! Initial conditions
  !----------------------
  u_init(1:2) = 0.d0 0.d0  ! controls initial velocity
  smoothing_width = 2.d0   ! scale factor for smoothing initial profile
  initial_variance = 1.d0   ! multiplicative factor for initial fluctuations
                            ! (if negative, total momentum is set to zero)

  ! Boundary conditions
  !----------------------
  ! BC specifications:
  ! -1 = periodic
  ! 100 = no-slip wall      (Dir condition for normal vel; Dir velocity condition for trans vel)
  ! 101 = no-slip reservoir (Dir condition for normal vel; Dir velocity condition for trans vel)
  ! 200 = slip wall         (Dir condition for normal vel; Dir traction condition for trans vel)
  ! 201 = slip reservoir    (Dir condition for normal vel; Dir traction condition for trans vel)
  ! For a complete list see bc.f90
  bc_lo(1:2) = -1 100
  bc_hi(1:2) = -1 100

  ! Each no-slip wall may be moving with a specified tangential 
  ! velocity along the tangential directions
  ! In 2D:
  ! wallspeed_lo/hi(1,1) - yvel on x-face
  ! wallspeed_lo/hi(1,2) - xvel on y-face
  ! In 3D:
  ! wallspeed_lo/hi(1,1) - yvel on x-face
  ! wallspeed_lo/hi(2,1) - zvel on x-face
  ! wallspeed_lo/hi(1,2) - xvel on y-face
  ! wallspeed_lo/hi(2,2) - zvel on y-face
  ! wallspeed_lo/hi(1,3) - xvel on z-face
  ! wallspeed_lo/hi(2,3) - yvel on z-face
  wallspeed_lo(1,1:2) = 0.d0 0.d0
  wallspeed_hi(1,1:2) = 0.d0 0.d0

  ! Control for analyze_spectra.90 for calling HydroGrid
  !----------------------
  hydro_grid_int = 0    ! How often to call updateHydroGrid
                        ! 0 if never
                        ! negative for projectHydroGrid custom analysis
                        ! positive for updateHydroGrid

  project_dir = -2        ! Projection direction (1=x, 2=y, 3=z)
  ! Meaning: 0=analyze 3D data only (no projection needed for HydroGrid, 
  !          but still need projection if stats_int>0)
  ! +dim=project along dim then analyze 2D only,
  ! -dim=analyze 3D and then project along dim so we also analyze 2D data
  ! It is better to use the conserved variables but it does not quite work for staggered

  max_grid_projection(1:1) = 128 ! parallelization parameters
  stats_int = 100                ! Project grid for analysis
                                 ! If positive, how often to compute mean and 
                                 ! standard deviation over reduced dimensions
  n_steps_save_stats = 100 ! How often to dump HydroGrid output files
  n_steps_skip = 0        ! How many steps to skip
  analyze_conserved = F   ! Should we use conserved variables for the analysis
                          ! (does not work well)
  center_snapshots = F    ! Should we use cell-centered momenta for the analysis
                          ! (will smooth fluctuations)

/

&probin_multispecies

  ! Physical properties:
  !----------------------
  nspecies = 3
  fraction_tolerance = 1.d-12 ! For roundoff errors in mass and mole fractions
  start_time = 0.d0

  inverse_type = 1       ! Only for LAPACK:  1=inverse, 2=pseudo inverse
  timeinteg_type = 1
  correct_flux = T       ! Manually ensure mass is conserved to roundoff 
  print_error_norms = T
  is_ideal_mixture = T   ! If T assume Gamma=I (H=0) and simplify
  is_nonisothermal = F   ! If T Soret effect will be included
  use_lapack = F         ! Use LAPACK or iterative method for diffusion matrix (recommend False)
  chi_iterations = 10    ! number of iterations used in Dbar2chi_iterative
  
  ! Initial and boundary conditions 
  !----------------------
  T_init(1:2) = 300.d0 300.d0  ! initial values for temperature (bottom/top, inside/outside circle, etc.)
  temp_type = 0 ! for initializing temperature

  ! initial values for CONCENTRATIONS
  c_init(1,1:3) = 0.01088d0  0.0168d0  0.97232d0  ! those values because 2720*0.168 = 4200*0.01088
  c_init(2,1:3) =  0.001088d0 0.00168d0 0.997232d0 ! 0.97232d0  0.0168d0 

  ! c_i boundary conditions (dir,lohi,species)
  c_bc(1,1,1:2) = 0.d0 0.d0
  c_bc(1,2,1:2) = 0.d0 0.d0
  c_bc(2,1,1:2) = 0.d0 0.d0
  c_bc(2,2,1:2) = 0.d0 0.d0
  
  ! Thermodynamic and transport properties:
  !----------------------

  ! These are lower-triangules of symmetric matrices represented as vectors
  ! Number of elements is (nspecies*(nspecies-1)/2)
  ! The values are read row by row starting from top going down (this allows easy addition/deletion of new species/rows)
  ! So D_12; D_13, D_23; D_14, D_24, D_34; ...
  Dbar(1:3) = 1.17d-5 1.33d-5 2.03d-5  ! diffusion of Na: 13.3e-6 ; Cl: 20.3e-6; water: 2.3e-5
  Dtherm(1:1) = 0.d0       ! thermo-diffusion coefficients, only differences among elements matter
  H_offdiag(1:1) = 0.d0    ! Off diagonal elements of H=d^2F/dx^2  
  H_diag(1:1) = 0.d0       ! Diagonal of H=d^2F/dx^2, these are vectors of length nspecies

  plot_stag = F            ! plot staggered velocities in separate plotfile

/

&probin_charged
 
  use_charged_fluid = T
  dielectric_const = 6.91d-19
  charge_per_mass(1:3) = 1000.d0 -1000.d0 0.d0
  charge_per_mass(1:3) = 4.2d3 -2.72d3 0.d0
  Epot_wall(2,2) = 2.d9
/

! Stokes solver for velocity
&probin_gmres

  ! preconditioner type
  ! 1 = projection preconditioner
  !-1 = projection preconditioner with expensive pressure update
  ! 2 = lower triangular preconditioner
  !-2 = lower triangular preconditioner with negative sign
  ! 3 = upper triangular preconditioner
  !-3 = upper triangular preconditioner with negative sign
  ! 4 = Block diagonal preconditioner
  !-4 = Block diagonal preconditioner with negative sign
  precon_type = 1

  ! weighting of pressure when computing norms and inner products
  p_norm_weight = 1.d0

  ! scale theta_alpha, beta, gamma, and b_u by this, and then scale x_p by the inverse
  scale_factor = 1.d0

  ! MAC projection solver parameters:
  mg_verbose = 0        ! multigrid verbosity
  cg_verbose = 0        ! BiCGStab (mg_bottom_solver=1) verbosity
  mg_max_vcycles = 1    ! maximum number of V-cycles
  mg_minwidth = 2       ! length of box at coarsest multigrid level
  mg_bottom_solver = 4  ! bottom solver type
                        ! 0 = smooths only, controlled by mg_nsmooths_bottom
                        ! 1 = BiCGStab
                        ! 4 = Fancy bottom solve that coarsens down additionally
                        !     and then applies mg_nsmooths_bottom smooths
  mg_nsmooths_down = 2       ! number of smooths at each level on the way down
  mg_nsmooths_up = 2         ! number of smooths at each level on the way up
  mg_nsmooths_bottom = 8     ! number of smooths at the bottom (only if mg_bottom_solver=0)
  mg_max_bottom_nlevels = 10 ! for mg_bottom_solver=4, number of additional levels of multigrid
  mg_rel_tol = 1.d-12        ! relative tolerance stopping criteria

  ! Staggered multigrid solver parameters
  stag_mg_verbosity = 0       ! verbosity (set to 1 for debugging the gmres solver!)
  stag_mg_max_vcycles = 1     ! max number of v-cycles
  stag_mg_minwidth = 2        ! length of box at coarsest multigrid level
  stag_mg_bottom_solver = 4   ! bottom solver type
                              ! 0 = smooths only, controlled by mg_nsmooths_bottom
                              ! 4 = Fancy bottom solve that coarsens additionally
                              !     and then applies stag_mg_nsmooths_bottom smooths
  stag_mg_nsmooths_down = 2   ! number of smooths at each level on the way down
  stag_mg_nsmooths_up = 2     ! number of smooths at each level on the way up
  stag_mg_nsmooths_bottom = 8 ! number of smooths at the bottom
  stag_mg_max_bottom_nlevels = 10 ! for stag_mg_bottom_solver=4, number of additional levels of multigrid
  stag_mg_omega = 1.d0        ! weighted-jacobi omega coefficient
  stag_mg_smoother = 1        ! 0 = jacobi; 1 = 2*dm-color Gauss-Seidel
  stag_mg_rel_tol = 1.d-10    ! relative tolerance stopping criteria

  ! GMRES solver parameters
  gmres_rel_tol = 1.d-10 ! relative tolerance stopping criteria
  gmres_abs_tol = 0.d0  ! absolute tolerance stopping criteria
  gmres_verbose = 0     ! gmres verbosity; if greater than 1, more residuals will be printed out
  gmres_max_outer = 20  ! max number of outer iterations
  gmres_max_inner = 5   ! max number of inner iterations, or restart number
  gmres_max_iter = 100  ! max number of gmres iterations
  gmres_min_iter = 1    ! min number of gmres iterations

/


!----------------------------------------
! HydroGrid analysis
!----------------------------------------
! Variables: 1=rho, 2=v_x, 3=v_y, 4=T, 5=c=rho1/rho, 6=1-c=rho2/rho

! FULL 2D grid = First hydroAnalysisOptions namelist in IBAMR
! This one will be ignored if project_dir>0 (useful in 3D)
!----------------------------------------
&hydroAnalysisOptions
! 2D full grid data

   
/

!----------------------------------------
! PROJECTION along y axes (depends on x only) = Second hydroAnalysisOptions namelist in IBAMR
&hydroAnalysisOptions
! 1D projection onto direction perpendicular to y axes

   staggeredVelocities = 0 ! Are velocities on a staggered grid or not, (0, +1, or -1)*h/2

   outputFolder = "./"
   filePrefix = "SeaWater2D"

   writeSnapshotVTK = F ! Save snapshots of the instantaneous fields

   ! Means file:
   ! 1=y, 2=rho, 3-5=v, 6=T, 7=c in 3D
   ! 1=y, 2=rho, 3-4=v, 5=T, 6=c in 2D

   ! Save the flow to a VTK file:
   storeConserved = F ! We are not using conserved variables here due to staggering
   writeMeansVTK = F ! Save the means over the averaging interval

   ! Variances
   writeVariancesVTK = F ! Should we save a VTK file
   nVariances = 1
   ! Variance file:
   ! 1=y, 2=c-c
   variancePairs = "0 5 0 5"
      ! species1 variable1 species2 variable2
   
   ! Static structure factors
   writeSpectrumVTK = F
   subtractMeanFT = F ! The means are trivial here so no need to estimate them
   writeAbsValue = T ! Only write absolute values of complex values to VTK file?
   writeTheory = -1 ! Write the theoretical prediction (-1=none, 0==continuum or 1=MAC)
   nStructureFactors = 1
   ! 1=c-c
   structureFactorPairs = "0 5 0 5"

   ! Dynamic structure factors:
   nWavenumbers=6
   ! Shape (2,nWavenumbers):
   selectedWavenumbers="1 0, 2 0, 4 0, 6 0, 8 0, 10 0"
   nSavedSnapshots=100
      
   axisToPrint = 1 ! 1=x, 2=y, 3=z axis
   periodic = T ! Is the system periodic along the y axes
/

! PROJECTION along x axes (depends on y only) = not in IBAMR
!----------------------------------------
&hydroAnalysisOptions

/


