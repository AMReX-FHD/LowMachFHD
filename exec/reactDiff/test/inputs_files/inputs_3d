! sample inputs file containing the defaults found in the namelists

&probin_common

  ! Problem specification
  !----------------------
  dim_in = 3                            ! 2D or 3D
  prob_lo(1:3) = 0. 0. 0.               ! physical lo coordinate
  prob_hi(1:3) = 1. 1. 1.               ! physical hi coordinate
  n_cells(1:3) = 1  1  1                ! number of cells in domain
  max_grid_size(1:3) = 1 1 1            ! max number of cells in a box

  prob_type = 1                         ! sets the problem type (initial condition)
                                        ! (see src_reactDiff/init_n.f90)
                                        ! 0 thermodynamic equilibrium
                                        ! 1 Gaussian distribution
                                        ! 2 constant gradient
                                        ! 3 1+sin^2(pi*x)*sin^2(pi*y)*sin^2(pi*z)
                                        ! 4 vertical stripe
                                        ! 5 bubble

  nspecies = 2                          ! number of species

  ! Time-step control
  !----------------------
  fixed_dt = 1.                         ! time step (if positive, fixed)
  cfl = 0.5                             ! cfl number (used if fixed_dt<0) to determine time step

  ! Controls for number of steps between actions (for HydroGrid see below)
  !----------------------
  max_step = 1                          ! maximum number of time steps
  plot_int = 0                          ! interval for writing a plotfile (for visit/amrvis)
                                        ! (no plot files for plot_int<=0)
  chk_int = 0                           ! interval for writing a checkpoint
                                        ! (no checkpoint files for chk_int<0)
  restart = -1                          ! checkpoint restart number
                                        ! (no restart for restart<0)
  print_int = 0                         ! how often to output diagnostics to screen
                                        ! (no screen output for print_int<=0)

  ! stochastic forcing amplitudes (1 for physical values, 0 to run them off)
  variance_coef_mass = 1.               ! global scaling epsilon for stochastic mass forcing

  ! Random number generator
  !----------------------
  use_bl_rng = F                        ! if T, use F_BaseLib/bl_random RNGs
                                        ! if F, use HydroGrid RNGs

  ! random number seed (for HydroGrid RNGs)
  ! 0        = unpredictable seed based on clock
  ! positive = fixed seed
  seed = 1

  ! if use_bl_rng=T, assign random number seeds for each physical process
  ! for positive value, the value is assigned as seed value
  ! for 0, a positive value is randomly chosen
  ! if -1 (only for restart), RNGs status is restored from checkpoint data
  seed_diffusion = 1
  seed_reaction = 1
  seed_init = 1

  ! Initial conditions
  !----------------------
  perturb_width = 0.                    ! scale factor for perturbed part in initial profile (for prob_type=4,5)
  smoothing_width = 1.                  ! scale factor for smoothing initial profile (for prob_type=4,5)
  initial_variance = 0.                 ! multiplicative factor for initial fluctuations
                                        ! if negative, total mass fluctuation is set to zero (for integer_populations=F)

  ! Boundary conditions
  !----------------------
  ! BC specifications:
  ! -1 = periodic
  ! 100 = no-slip wall      (Dir condition for normal vel; Dir velocity condition for trans vel)
  ! 101 = no-slip reservoir (Dir condition for normal vel; Dir velocity condition for trans vel)
  ! 200 = slip wall         (Dir condition for normal vel; Dir traction condition for trans vel)
  ! 201 = slip reservoir    (Dir condition for normal vel; Dir traction condition for trans vel)
  ! For a complete list see src_common/bc.f90
  bc_lo(1:3) = -1 -1 -1
  bc_hi(1:3) = -1 -1 -1

  ! Control for analyze_spectra.90 for calling HydroGrid
  !----------------------
  hydro_grid_int = 0    ! How often to call updateHydroGrid
                        ! 0 if never
                        ! negative for projectHydroGrid custom analysis
                        ! positive for updateHydroGrid

  project_dir = 0       ! Projection direction (1=x, 2=y, 3=z)
  ! Meaning: 0=analyze 3D data only (no projection needed for HydroGrid, 
  !          but still need projection if stats_int>0)
  ! +dim=project along dim then analyze 2D only,
  ! -dim=analyze 3D and then project along dim so we also analyze 2D data
  ! It is better to use the conserved variables but it does not quite work for staggered

  max_grid_projection(1:2) = 128 128    ! parallelization parameters
  stats_int = -1                        ! Project grid for analysis
                                        ! If positive, how often to compute mean and 
                                        ! standard deviation over reduced dimensions
  n_steps_save_stats = -1               ! How often to dump HydroGrid output files
  n_steps_skip = 0                      ! How many steps to skip
  analyze_conserved = F                 ! Should we use conserved variables for the analysis
                                        ! (does not work well)
  center_snapshots = F                  ! Should we use cell-centered momenta for the analysis
                                        ! (will smooth fluctuations)
                                               
  histogram_unit = -1                   ! If positive, write the values of the densities
                                        ! to a file for histogramming

/

&probin_reactdiff

  ! Control of algorithm
  !----------------------
  temporal_integrator = 0               ! 0=D + R (first-order splitting)
                                        ! 1=(1/2)R + D + (1/2)R (Strang option 1)
                                        ! 2=(1/2)D + R + (1/2)D (Strang option 2)
                                        ! -1=unsplit forward Euler
                                        ! -2=unsplit explicit midpoint
                                        ! -3=unsplit multinomial diffusion
                                        ! -4=unsplit implicit midpoint

  diffusion_type = 0                    ! only used for split schemes (temporal_integrator>=0)
                                        ! 0=explicit trapezoidal predictor/corrector
                                        ! 1=Crank-Nicolson semi-implicit
                                        ! 2=explicit midpoint
                                        ! 3=multinomial diffusion
                                        ! 4=forward Euler

  reaction_type = 0                     ! only used for split schemes (temporal_integrator>=0)
                                        ! 0=first-order (deterministic, tau leaping, CLE, or SSA)
                                        ! 1=second-order (deterministic, tau leaping, or CLE only)

  midpoint_stoch_flux_type = 1          ! only used for midpoint diffusion schemes (split as well as unsplit)
                                        ! corrector formulation of noise
                                        ! 1=K(nold) * W1 + K(nold)         * W2
                                        ! 2=K(nold) * W1 + K(npred)        * W2
                                        ! 3=K(nold) * W1 + K(2*npred-nold) * W2

  avg_type = 1                          ! how to compute n on faces for stochastic weighting
                                        ! 1=arithmetic (with C0-Heaviside), 2=geometric, 3=harmonic
                                        ! 10=arithmetic average with discontinuous Heaviside function
                                        ! 11=arithmetic average with C1-smoothed Heaviside function
                                        ! 12=arithmetic average with C2-smoothed Heaviside function

  inhomogeneous_bc_fix = F              ! use the Einkemmer boundary condition fix (split schemes only)

  ! Initial and boundary conditions
  !----------------------
  n_init_in(1:2,1) = 1. 1.              ! initial values to be used in init_n.f90
  n_init_in(1:2,2) = 1. 1.

  model_file_init = 0                   ! initialize from model files:
                                        ! 0=no, 1=usual order (Fortran), -1=transpose order (C)

  !model_file(1)="./init1.dat"          ! one model file for each species
  !model_file(2)="./init2.dat"

  integer_populations = F               ! initialize with all number of molecules strictly integer

  n_bc(1:3,1,1) = 0. 0. 0.              ! n_i boundary conditions (dir,lohi,species)
  n_bc(1:3,2,1) = 0. 0. 0.
  n_bc(1:3,1,2) = 0. 0. 0.
  n_bc(1:3,2,2) = 0. 0. 0.

  ! Diffusion     
  !----------------------                          
  D_Fick(1:2) = 1. 1.                   ! Fickian diffusion coeffs

  diffusion_stencil_order = 1           ! diffusion boundary stencil order
  mg_verbose = 0                        ! implicit diffusion solve verbosity
  cg_verbose = 0                        ! implicit diffusion solve bottom solver verbosity
  implicit_diffusion_rel_eps = 1.e-10   ! relative eps for implicit diffusion solve
  implicit_diffusion_abs_eps = -1.      ! absolute eps for implicit diffusion solve
  
  ! Controlling output
  !----------------------                          
  n_steps_write_avg = 0                 ! if non-zero, its absolute value tells how many steps before writing total densites
                                        ! if positive, it writes average number densities in the system (fort.9)
                                        ! if negative, it writes the total number of molecules in the system (fort.21)

/

&probin_chemistry

  nreactions = 0                        ! number of reactions

  ! stoichiometric factors for each reaction (species,LHS(1)/RHS(2),reaction)
  ! Example: For N1 + 2*N2 -> N3 use
  ! stoichiometric_factors(1:3,1,1) = 1 2 0
  ! stoichiometric_factors(1:3,2,1) = 0 0 1
  stoichiometric_factors(1:2,1,1) = 0 0
  stoichiometric_factors(1:2,2,1) = 0 0

  ! reaction rate constant for each reaction (assuming Law of Mass Action holds)
  ! using rate_multiplier, reaction rates can be changed by the same factor
  ! if include_discrete_LMA_correction, n^2 and n^3 in rate expressions become
  ! n*(n-1/dv) and n*(n-1/dv)*(n-2/dv). 
  rate_const(1:1) = 0.
  rate_multiplier = 1.
  include_discrete_LMA_correction = T

  ! if n is positive, exclude species n (=solvent) when computing reaction rates
  ! in this case, the concentration of the solvent is assumed to be constant,
  ! which should be reflected on rate constants.
  ! if 0, no species is excluded
  ! e.g. U + S -> 2U, if exclude_solvent_comput_rates=0, rate=k*n_U*n_S
  !                   if exclude_solvent_comput_rates=2, rate=k_new*n_U where k_new=k*n_S
  exclude_solvent_comput_rates = 0

  ! how to sample chemical production rates
  use_Poisson_rng = 1                   ! 2=SSA
                                        ! 1=do tau leaping (Poisson increments)
                                        ! 0= do CLE (Gaussian increments)
                                        ! -1=do deterministic chemistry

/
