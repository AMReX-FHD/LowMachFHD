&probin_common

  ! Problem specification
  !----------------------
  dim_in = 3                    ! 2D or 3D  
  prob_lo(1:3) = 0.d0 0.d0 0.d0 ! physical lo coordinate
  prob_hi(1:3) = 1.d0 1.d0 1.d0 ! physical hi coordinate
  n_cells(1:3) = 64 64 64       ! number of cells in domain
  max_grid_size(1:3) = 64 64 64 ! max number of cells in a box

  ! Time-step control
  !----------------------
  fixed_dt = 1.d0        ! time step

  ! Controls for number of steps between actions
  !----------------------
  plot_int = 0           ! Interval for writing a plotfile (for visit/amrvis)

  ! Algorithm control / selection
  !----------------------

  ! random number seed
  ! 0        = unpredictable seed based on clock
  ! positive = fixed seed
  seed = 0

  ! Viscous friction L phi operator
  ! if abs(visc_type) = 1, L = div beta grad
  ! if abs(visc_type) = 2, L = div [ beta (grad + grad^T) ]
  ! if abs(visc_type) = 3, L = div [ beta (grad + grad^T) + I (gamma - (2/3)*beta) div ]
  ! positive = assume constant coefficients
  ! negative = assume spatially-varying coefficients
  visc_type = 1

  ! Boundary conditions
  !----------------------
  ! BC specifications:
  ! -1 = periodic
  ! 100 = no-slip wall      (Dir condition for normal vel; Dir velocity condition for trans vel)
  ! 101 = no-slip reservoir (Dir condition for normal vel; Dir velocity condition for trans vel)
  ! 200 = slip wall         (Dir condition for normal vel; Dir traction condition for trans vel)
  ! 201 = slip reservoir    (Dir condition for normal vel; Dir traction condition for trans vel)
  ! For a complete list see bc.f90
  bc_lo(1:3) = -1 -1 -1
  bc_hi(1:3) = -1 -1 -1

/

&probin

  ! Initial conditions and forcing functions (for exact_solutions.f90)
  !----------------------
  prob_coeff = 2  ! Initial setup/forcing etc selection 
  prob_sol = 2    ! Initial setup/forcing etc selection 
  test_type = 1   ! Check gmres, preconditioner, or discretization accuracy
                  ! (see main_driver.f90 for key)

  ! For interfaces, we smooth the concentration with tanh profile to avoid a Gibbs phenomenon:
  smoothing_width = 1.d0  ! The smoothing width is in units of cell lengths, not physical length!

  ! Wave-indices for incompressible modes inside a box
  ! First component corresponds to prob_dir direction
  ! Second component corresponds to mod(prob_dir+1,DIM)
  mode_coefs(1:2) = 1 1
  prob_dir = 1                     ! Which direction is vorticity along
  ABC_coefs(1:3) = 1.d0 1.d0 1.d0  ! ABC flow in 3D (a/b/c) (like Taylor vortices in 2D):

  ! 0.0 = time-independent
  ! 1.0 = time-dependent
  theta_alpha_fac = 1.d0

  ! Physical parameters
  !----------------------
  ! Every coefficient is of the form
  ! coeff_mag*(deterministic + var_coeff_mag*rand())
  ! The coefficients are indexed from 1-3, index 1 is density, 2 is shear viscosity, and 3 is bulk viscosity
  var_coeff_mag(1:3) = 0.d0 0.d0 0.d0  ! The magnitude of density/viscosity variation, for random coefficient
  coeff_mag(1:3) = 1.d0 1.d0 1.d0      ! The magnitude of density/viscosity
  
  ! For two-phase system, the coefficients for phase 2 are scaled by coeff_ratio
  ! So phase 1 is: coeff_mag*(deterministic + var_coeff_mag*rand())
  ! So phase 2 is: coeff_ratio*coeff_mag*(deterministic + var_coeff_mag*rand())
  coeff_ratio(1:3) = 1.d0 1.d0 1.d0  ! The ratio for alpha, beta and gamma

/

&probin_gmres

  ! preconditioner type
  ! 1 = projection preconditioner
  !-1 = projection preconditioner with expensive pressure update
  ! 2 = lower triangular preconditioner
  !-2 = lower triangular preconditioner with negative sign
  ! 3 = upper triangular preconditioner
  !-3 = upper triangular preconditioner with negative sign
  ! 4 = Block diagonal preconditioner
  !-4 = Block diagonal preconditioner with negative sign
  precon_type = 1

  ! use the viscosity-based BFBt Schur complement (from Georg Stadler)
  visc_schur_approx = 0

  ! weighting of pressure when computing norms and inner products
  p_norm_weight = 1.d0

  ! scale theta_alpha, beta, gamma, and b_u by this, and then scale x_p by the inverse
  scale_factor = 1.d0

  ! MAC projection solver parameters:
  mg_verbose = 0             ! multigrid verbosity
  cg_verbose = 0             ! BiCGStab (mg_bottom_solver=1) verbosity
  mg_max_vcycles = 1         ! maximum number of V-cycles
  mg_minwidth = 2            ! length of box at coarsest multigrid level
  mg_bottom_solver = 4       ! bottom solver type
                             ! 0 = smooths only, controlled by mg_nsmooths_bottom
                             ! 1 = BiCGStab
                             ! 4 = Fancy bottom solve that coarsens down additionally
                             !     and then applies mg_nsmooths_bottom smooths
  mg_nsmooths_down = 2       ! number of smooths at each level on the way down
  mg_nsmooths_up = 2         ! number of smooths at each level on the way up
  mg_nsmooths_bottom = 8     ! number of smooths at the bottom (only if mg_bottom_solver=0)
  mg_max_bottom_nlevels = 10 ! for mg_bottom_solver=4, number of additional levels of multigrid
  mg_rel_tol = 1.d-9         ! relative tolerance stopping criteria

  ! Staggered multigrid solver parameters
  stag_mg_verbosity = 0           ! verbosity
  stag_mg_max_vcycles = 1         ! max number of v-cycles
  stag_mg_minwidth = 2            ! length of box at coarsest multigrid level
  stag_mg_bottom_solver = 4       ! bottom solver type
                                  ! 0 = smooths only, controlled by mg_nsmooths_bottom
                                  ! 4 = Fancy bottom solve that coarsens additionally
                                  !     and then applies stag_mg_nsmooths_bottom smooths
  stag_mg_nsmooths_down = 2       ! number of smooths at each level on the way down
  stag_mg_nsmooths_up = 2         ! number of smooths at each level on the way up
  stag_mg_nsmooths_bottom = 8     ! number of smooths at the bottom
  stag_mg_max_bottom_nlevels = 10 ! for stag_mg_bottom_solver=4, number of additional levels of multigrid
  stag_mg_omega = 1.d0            ! weighted-jacobi omega coefficient
  stag_mg_smoother = 1            ! 0 = jacobi; 1 = 2*dm-color Gauss-Seidel
  stag_mg_rel_tol = 1.d-9         ! relative tolerance stopping criteria

  ! GMRES solver parameters
  gmres_rel_tol = 1.d-9    ! relative tolerance stopping criteria
  gmres_abs_tol = 0.d0     ! absolute tolerance stopping criteria
  gmres_verbose = 1        ! gmres verbosity; if greater than 1, more residuals will be printed out
  gmres_max_outer = 20     ! max number of outer iterations
  gmres_max_inner = 5      ! max number of inner iterations, or restart number
  gmres_max_iter = 100     ! max number of gmres iterations
  gmres_min_iter = 1       ! min number of gmres iterations

  gmres_spatial_order = 2  ! spatial order of viscous and gradient operators in matrix "A"

/
