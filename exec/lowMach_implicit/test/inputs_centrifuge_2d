&probin_lowmach

  ! problem setup
  c_init(1) = 0.5d0   ! initial concentration

  ! simulation properties
  max_step = 10000           ! maximum number of time steps
  print_int = 1              ! how often to output EOS drift and sum of conserved quantities
  project_eos_int = 1        ! how often to call project_onto_eos
  grav(1:2) = 0.d0 -0.1d0

  ! fluid properties
  nscal = 2                       ! scalars; nscal=2 means we carry rho and rho*c
  rhobar(1:2) = 1.d0 2.d0         ! rho1bar and rho2bar
  visc_coef = 1.d0                ! momentum diffusion coefficient 'eta'   
  diff_coef = 1.d0                ! concentration diffusion coefficient 'chi'
  mol_mass(1:2) = 1.d0 1.d0       ! molar mass of species
  kT = 1.d0                       ! temperature

  ! stochastic properties
  variance_coef = 1.d-3      ! global scaling epsilon for stochastic forcing
  variance_coef = 0          ! global scaling epsilon for stochastic forcing
  conc_scal = 1.d0           ! Scaling for concentration stochastic forcing is variance_coeff*conc_scal
  filtering_width = 0        ! If positive the random numbers will be filtered to smooth out the fields
  stoch_stress_form = 1      ! 0=nonsymmetric (div(v)=0), 1=symmetric (no bulk)

/

&probin_common

  ! Problem specification
  !----------------------
  dim_in = 2                 ! 2D or 3D  
  prob_lo(1:2) = 0.d0 0.d0   ! physical lo coordinate
  prob_hi(1:2) = 64.d0 64.d0 ! physical hi coordinate
  n_cells(1:2) = 64 64       ! number of cells in domain
  max_grid_size(1:2) = 32 32 ! max number of cells in a box
  fixed_dt = 0.2d0           ! time step
  plot_int = 100             ! Interval for writing a plotfile (for visit/amrvis)
  prob_type = 4              ! sets scalars, m, coefficients (see init.f90)

  ! Algorithm control / selection
  !----------------------

  ! random number seed
  ! 0        = unpredictable seed based on clock
  ! positive = fixed seed
  seed = 1

  ! L phi operator
  ! if abs(visc_type) = 1, L = div beta grad
  ! if abs(visc_type) = 2, L = div [ beta (grad + grad^T) ]
  ! if abs(visc_type) = 3, L = div [ beta (grad + grad^T) + I (gamma - (2/3)*beta) div ]
  visc_type = 1

  ! Boundary conditions
  !----------------------
  ! BC specifications:
  ! -1  = periodic
  ! 100 = no-slip (Dirichlet velocity condition for normal; Dirichlet velocity condition for trans)
  ! 101 = no-slip reservoir
  ! 200 = slip    (Dirichlet velocity condition for normal; Dirichlet traction condition for trans)
  ! 201 = slip reservoir
  bc_lo(1:2) = -1 100
  bc_hi(1:2) = -1 100

/

&probin_gmres

  ! preconditioner type
  ! 1 = projection preconditioner
  !-1 = projection preconditioner with expensive pressure update
  ! 2 = lower triangular preconditioner
  !-2 = lower triangular preconditioner with negative sign
  ! 3 = upper triangular preconditioner
  !-3 = upper triangular preconditioner with negative sign
  ! 4 = Block diagonal preconditioner
  !-4 = Block diagonal preconditioner with negative sign
  precon_type = 1

  ! weighting of pressure when computing norms and inner products
  p_norm_weight = 1.d0

  ! MAC projection solver parameters:
  mg_verbose = 0               ! multigrid verbosity
  cg_verbose = 0               ! BiCGStab (mg_bottom_solver=1) verbosity
  mg_max_vcycles = 1           ! maximum number of V-cycles
  mg_minwidth = 2              ! length of box at coarsest multigrid level
  mg_bottom_solver = 0         ! bottom solver type
                               ! 0 = smooths only, controlled by mg_nsmooths_bottom
                               ! 1 = BiCGStab
                               ! 4 = Fancy bottom solve that coarsens as far as possible 
                               !     and then applies BiCGStab
  mg_nsmooths_down = 2         ! number of smooths at each level on the way down
  mg_nsmooths_up = 2           ! number of smooths at each level on the way up
  mg_nsmooths_bottom = 8       ! number of smooths at the bottom (only if mg_bottom_solver=0)
  mg_max_bottom_nlevels = 1000 ! for mg_bottom_solver=4, number of additional levels of multigrid
  mg_rel_tol = 1.d-9           ! relative tolerance stopping criteria

  ! Staggered multigrid solver parameters
  stag_mg_verbosity = 0        ! verbosity
  stag_mg_max_vcycles = 1      ! max number of v-cycles
  stag_mg_minwidth = 2         ! length of box at coarsest multigrid level
  stag_mg_nsmooths_down = 2    ! number of smooths at each level on the way down
  stag_mg_nsmooths_up = 2      ! number of smooths at each level on the way up
  stag_mg_nsmooths_bottom = 8  ! number of smooths at the bottom
  stag_mg_omega = 1.d0         ! weighted-jacobi omega coefficient
  stag_mg_smoother = 1         ! 0 = jacobi; 1 = 2*dm-color Gauss-Seidel
  stag_mg_rel_tol = 1.d-9      ! relative tolerance stopping criteria

  ! GMRES solver parameters
  gmres_rel_tol = 1.d-9        ! relative tolerance stopping criteria
  gmres_abs_tol = 0.d0         ! absolute tolerance stopping criteria
  gmres_verbose = 1            ! gmres verbosity; if greater than 1, more residuals will be printed out
  gmres_max_outer = 20         ! max number of outer iterations
  gmres_max_inner = 5          ! max number of inner iterations, or restart number
  gmres_max_iter = 100         ! max number of gmres iterations
  gmres_min_iter = 1           ! min number of gmres iterations

/
