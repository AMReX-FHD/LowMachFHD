&probin_binarylm

  ! fluid properties:
  temperature = 298.15           ! temperature = In IBAMR the product k_B*T is input

  boussinesq_beta = 0.2362    ! add Boussinesq-type forcing = EXPANSION in IBAMR

  ! Boundary and initial conditions:
  ! Here concentration is assumed to vary along the y axes only
  c_init(1:2) = 0.4808 0.5192  ! controls initial concentration range = [C_TOP C_BOTTOM] in IBAMR
  ! Specifies boundary conditions at top and bottom y walls (see bc_lo and bc_hi below):
  !c_bc(2,1:2) = 0.66 0.34 ! Dirichlet 
  c_bc(2,1:2) = -0.25098 -0.25098 ! Neumann
      ! Equivalent to [GRADC,GRADC] in IBAMR for Neumann
      ! This is [gcoef_function_2 gcoef_function_3] in IBAMR
      ! For Dirichlet (RESERVOIR) BCs it is (a=1, b=0) in IBAMR
      ! For Neumann (WALL) BCs it is (a=0, b=1) in IBAMR

  ! Algorithmic control:
  barodiffusion_type = 0  ! 0 = no barodiffusion
                          ! 1 = fixed gradp from initialization
                          ! 2 = update gradp each time step
  algorithm_type = 2	  ! enable overdamped (infinite Sc) algorithm
      ! 0 = Inertial algorithm
      ! 1 = Overdamped with 1 RNG
      ! 2 = Overdamped with 2 RNGs  
      
  ! stochastic properties
  initial_variance = 0.d0   ! multiplicative factor for initial fluctuations (if negative, total momentum is set to zero)
  conc_scal = 0.d0          ! Scaling for concentration stochastic forcing is variance_coef*conc_scal = C_VAR in IBAMR
  
  ! HydroGrid analysis:
  analyze_binary = F ! T for old specialized analysis (HDMD/HSMD for explicit low Mach paper) exec/binaryLM/analyze_spectra.f90
                     ! F for new general analysis code src_common/analyze_spectra.f90

/

&probin_common

  ! Problem specification
  !----------------------
  dim_in = 2                 ! 2D or 3D  
  
  grav(1:2) = 0.0 -981  ! gravity vector (negative is downwards) = [0,-GRAVITY] in IBAMR

  ! Domain shape and size = CartesianGeometry in IBAMR
  prob_lo(1:2) = 0.d0 0.d0   ! physical lo coordinate = x_lo in IBAMR
  prob_hi(1:2) = 0.153 0.153  ! physical hi coordinate = x_up in IBAMR
  n_cells(1:2) = 64 64      ! number of cells in domain = domain_boxes in IBAMR
  max_grid_size(1:2) = 32 32 ! max number of cells in a box for parallelization = largest_patch_size in IBAMR
     ! Unlike IBAMR there is no automatic parallelization here -- user must specify box/patch shape manually
  
  ! Time stepping
  fixed_dt = 0.022679        ! time step = DT in IBAMR
  plot_int = 0             ! Interval for writing a plotfile (for visit/amrvis) = N_STEPS_DUMP in IBAMR
  chk_int = 0 ! If positive, how often to write a checkpoint (restart file)
  max_step = 1250000          ! maximum number of time steps = N_STEPS in IBAMR
  print_int = 25000 ! how often to output EOS drift and sum of conserved quantities = N_STEPS_CHECK in IBAMR
  project_eos_int = 1        ! how often to call project_onto_eos
  
  ! Determines initial conditions and other problem-specific parameters (see init.f90)
  ! 0 - linear gradient in c; c_init(1) at lo-y wall, c_init(2) at hi-y wall
  ! 1 = spherical bubble with c_init(1) in the interior, c_init(2) on the exterior
  ! 2 = bilayer interface (stripe)
    ! the lower third and upper third of the domain (in y) has c_init(1)
    ! the middle third of the domain has c_init(2)
  ! 3 = one fluid on top of another
     ! c_init(1), u_init(1) in lower half of domain (in y)
     ! c_init(2), u_init(2) in upper half  
  prob_type = 0              ! sets scalars, m, coefficients 

  ! random number seed
  ! 0        = unpredictable seed based on clock
  ! positive = fixed seed
  seed = 0 ! SEED in IBAMR

  ! Algorithm control / selection
  !----------------------
  
  ! L phi operator
  ! if abs(visc_type) = 1, L = div beta grad
  ! if abs(visc_type) = 2, L = div [ beta (grad + grad^T) ]
  ! if abs(visc_type) = 3, L = div [ beta (grad + grad^T) + I (gamma - (2/3)*beta) div ]
  ! positive = assume constant coefficients
  ! negative = assume spatially-varying coefficients
  visc_type = 1
  visc_coef = 0.0159062               ! momentum diffusion coefficient 'eta' = MU in IBAMR

  ! 1 = constant coefficients
  ! -1 = spatially-varing coefficients
  diff_type = 1
  diff_coef = 6.3d-6               ! concentration diffusion coefficient 'chi' = KAPPA in IBAMR

  rhobar(1:2) = 0.8416 0.8416   ! rho1bar and rho2bar = both equal to RHO in IBAMR

  advection_type = 0      ! 0 = centered, 1 = unlimited bds, 2 = limited bds

  ! Stochastic fluxes: Here only variance_coef*k_B*temperature matters in the end
  variance_coef = 1     ! global scaling epsilon for stochastic forcing = 1/DZ = 1/THICKNESS in IBAMR
  k_B = 1.38065d-16                 ! Boltzmann's constant
  filtering_width = 0        ! If positive the random numbers will be filtered to smooth out the fields
  stoch_stress_form = 1      ! 0=nonsymmetric (div(v)=0), 1=symmetric (no bulk)

  ! Boundary conditions
  !----------------------
  ! BC specifications:
  ! -1  = periodic
  ! no slip: Dirichlet velocity condition for normal; Dirichlet velocity condition for trans
  ! NO_SLIP_WALL        = 100 ! Neumann condition for concentration - SORET
  ! NO_SLIP_RESERVOIR   = 101 ! Dirichlet BC for concentration - WaterGlycerol mixing
  ! slip: Dirichlet velocity condition for normal; Dirichlet traction condition for trans
  !    SLIP_WALL        = 200 ! Same as no slip but may reduce finite-size effects
  !    SLIP_RESERVOIR   = 201 ! Same as no slip but may reduce finite-size effects
  bc_lo(1:2) = -1 100 ! BC for low/bottom walls = (a/b)coef_function_{0,2,4} in IBAMR
  bc_hi(1:2) = -1 100 ! BC for high/top walls   = (a/b)coef_function_{1,3,5} in IBAMR

  ! Each no-slip wall may be moving with a specified tangential 
  ! velocity along the tangential directions
  ! In 2D:
  ! wallspeed_lo/hi(1,1) - yvel on x-face
  ! wallspeed_lo/hi(1,2) - xvel on y-face
  wallspeed_lo(1,2) = 0.d0 ! V_BOTTOM in IBAMR
  wallspeed_hi(1,2) = 0.d0 ! V_TOP in IBAMR

  ! HydroGrid analysis code options:
  hydro_grid_int = 20         ! How often to call updateHydroGrid = N_STEPS_POST in IBAMR
                             ! 0 if never
                             ! negative for projectHydroGrid custom analysis = PROJECT_Y=TRUE in IBAMR
                             ! positive for updateHydroGrid = PROJECT_Y=FALSE in IBAMR
  project_dir = 2	     ! Projection direction (1=x, 2=y, 3=z) = Fixed at 2 in IBAMR
  	                     ! Meaning: 0=analyze 3D data only (no projection needed for HydroGrid, 
  	                     !          but still need projection if stats_int>0)
  	                     ! +dim=project along dim then analyze 2D only,
  	                     ! -dim=analyze 3D and then project along dim so we also analyze 2D data
  max_grid_projection = 32   ! parallelization parameter for analysis
  stats_int =  0            ! Project grid for analysis and write hstat and vstat files
                             ! If positive, how often to compute mean and 
                             ! standard deviation over reduced dimensions = N_STEPS_SNAPSHOT in IBAMR
  n_steps_save_stats = 0  ! How often to dump HydroGrid output files
  n_steps_skip = 250000           ! How many steps to skip = N_STEPS_SKIP in IBAMR  
  analyze_conserved = F      ! Should we use conserved variables for the analysis (does not work well)
  center_snapshots = T       ! Should we use cell-centered momenta for the analysis (will smooth fluctuations)

/

&probin_gmres

  ! preconditioner type
  ! 1 = projection preconditioner
  !-1 = projection preconditioner with expensive pressure update
  ! 2 = lower triangular preconditioner
  !-2 = lower triangular preconditioner with negative sign
  ! 3 = upper triangular preconditioner
  !-3 = upper triangular preconditioner with negative sign
  ! 4 = Block diagonal preconditioner
  !-4 = Block diagonal preconditioner with negative sign
  precon_type = 2

  ! weighting of pressure when computing norms and inner products
  p_norm_weight = 1.d0

  ! scale theta, beta, gamma, and b_u by this, and then scale x_p by the inverse
  scale_factor = 1.d0

  ! MAC projection solver parameters:
  mg_verbose = 0               ! multigrid verbosity
  cg_verbose = 0               ! BiCGStab (mg_bottom_solver=1) verbosity
  mg_max_vcycles = 1           ! maximum number of V-cycles
  mg_minwidth = 2              ! length of box at coarsest multigrid level
  mg_bottom_solver = 0         ! bottom solver type
                               ! 0 = smooths only, controlled by mg_nsmooths_bottom
                               ! 1 = BiCGStab
                               ! 4 = Fancy bottom solve that coarsens down additionally
                               !     and then applies mg_nsmooths_bottom smooths
  mg_nsmooths_down = 2         ! number of smooths at each level on the way down
  mg_nsmooths_up = 2           ! number of smooths at each level on the way up
  mg_nsmooths_bottom = 8       ! number of smooths at the bottom (only if mg_bottom_solver=0)
  mg_max_bottom_nlevels = 10   ! for mg_bottom_solver=4, number of additional levels of multigrid
  mg_rel_tol = 1.d-9           ! relative tolerance stopping criteria

  ! Staggered multigrid solver parameters
  stag_mg_verbosity = 0        ! verbosity
  stag_mg_max_vcycles = 1      ! max number of v-cycles
  stag_mg_minwidth = 2         ! length of box at coarsest multigrid level
  stag_mg_bottom_solver = 0    ! bottom solver type
                               ! 0 = smooths only, controlled by mg_nsmooths_bottom
                               ! 4 = Fancy bottom solve that coarsens additionally
                               !     and then applies stag_mg_nsmooths_bottom smooths
  stag_mg_nsmooths_down = 2    ! number of smooths at each level on the way down
  stag_mg_nsmooths_up = 2      ! number of smooths at each level on the way up
  stag_mg_nsmooths_bottom = 8  ! number of smooths at the bottom
  stag_mg_max_bottom_nlevels = 10 ! for stag_mg_bottom_solver=4, 
                                  ! number of additional levels of multigrid
  stag_mg_omega = 1.d0         ! weighted-jacobi omega coefficient
  stag_mg_smoother = 1         ! 0 = jacobi; 1 = 2*dm-color Gauss-Seidel
  stag_mg_rel_tol = 1.d-9      ! relative tolerance stopping criteria

  ! GMRES solver parameters
  gmres_rel_tol = 1.d-6        ! relative tolerance stopping criteria
  gmres_abs_tol = 0.d0         ! absolute tolerance stopping criteria
  gmres_verbose = 0            ! gmres verbosity; if greater than 1, more residuals will be printed out
  gmres_max_outer = 20         ! max number of outer iterations
  gmres_max_inner = 5          ! max number of inner iterations, or restart number
  gmres_max_iter = 100         ! max number of gmres iterations
  gmres_min_iter = 1           ! min number of gmres iterations

/

!----------------------------------------
! HydroGrid analysis
!----------------------------------------
! Variables: 1=rho, 2=v_x, 3=v_y, 4=T, 5=c=rho1/rho, 6=1-c=rho2/rho

! FULL 2D grid = First hydroAnalysisOptions namelist in IBAMR
! This one will be ignored if project_dir>0 (useful in 3D)
!----------------------------------------
&hydroAnalysisOptions
! 2D full grid data

   staggeredVelocities = 1 ! Are velocities on a staggered grid or not

   outputFolder = "./"
   filePrefix = "SORET2DFull"

   axisToPrint = 2 ! 1=x, 2=y, 3=z axis
   periodic = F ! Is the system periodic along the y axes
   
   writeSnapshotVTK=F ! Save snapshots of the instantaneous fields

   ! Means file: column 1=y, 2=rho, 3=v_x, 4=v_y, 5=T, 6=c
   storeConserved = F ! Leave at F
   writeMeansVTK = F ! Write the means to a VTK file

   ! Variances
   writeVariancesVTK = F ! Should we save a VTK file
   nVariances = 1 ! How many co-variances to calculate and save
   variancePairs = "0 5 0 5"
      ! species1 variable1 species2 variable2
   
   ! Static structure factors
   writeSpectrumVTK = F
   writeAbsValue = F ! Only write absolute values of complex values to VTK file?
   writeTheory = -1 ! Also write: -1=Projections onto discrete modes, 0=Continuum theory, 1=MAC theory
   nStructureFactors = 0
   structureFactorPairs = ""

   ! Dynamic structure factors:
   nWavenumbers=0
   ! Shape (3,nWavenumbers):
   selectedWavenumbers=""
   nSavedSnapshots=1000
   
/

!----------------------------------------
! PROJECTION along y axes (depends on x only) = Second hydroAnalysisOptions namelist in IBAMR
&hydroAnalysisOptions
! 1D projection onto direction perpendicular to y axes

   staggeredVelocities = 1 ! Are velocities on a staggered grid or not, (0, +1, or -1)*h/2

   outputFolder = "./"
   filePrefix = "SORET2DProj.bouss"

   writeSnapshotVTK = F ! Save snapshots of the instantaneous fields

   ! Means file:
   ! 1=y, 2=rho, 3-5=v, 6=T, 7=c in 3D
   ! 1=y, 2=rho, 3-4=v, 5=T, 6=c in 2D

   ! Save the flow to a VTK file:
   storeConserved = F ! We are not using conserved variables here due to staggering
   writeMeansVTK = F ! Save the means over the averaging interval

   ! Variances
   writeVariancesVTK = F ! Should we save a VTK file
   nVariances = 1
   ! Variance file:
   ! 1=y, 2=c-c
   variancePairs = "0 5 0 5"
      ! species1 variable1 species2 variable2
   
   ! Static structure factors
   writeSpectrumVTK = F
   subtractMeanFT = T ! The means are trivial here so no need to estimate them
   writeAbsValue = T ! Only write absolute values of complex values to VTK file?
   writeTheory = -1 ! Write the theoretical prediction (-1=none, 0==continuum or 1=MAC)
   nStructureFactors = 1
   ! 1=c-c
   structureFactorPairs = "0 5 0 5"

   ! Dynamic structure factors:
   nWavenumbers=32
   ! Shape (2,nWavenumbers):
   selectedWavenumbers="1 0, 2 0, 3 0, 4 0, 5 0, 6 0, 7 0, 8 0, 9 0, 10 0, 11 0, 12 0, 13 0, 14 0, 15,0, 16 0, 17 0, 18 0, 19 0, 20 0, 21 0, 22 0, 23 0, 24 0, 25 0, 26 0, 27 0, 28 0, 29 0, 30 0, 31 0, 32 0"
   nSavedSnapshots=25
      
   axisToPrint = 1 ! 1=x, 2=y, 3=z axis
   periodic = T ! Is the system periodic along the y axes
/

! PROJECTION along x axes (depends on y only) = not in IBAMR
!----------------------------------------
&hydroAnalysisOptions
! 1D projection onto y axes, not really useful here

   staggeredVelocities = 0 ! Are velocities on a staggered grid or not

   outputFolder = "./"
   filePrefix = "SORET2DVert"

   axisToPrint = 1 ! 1=x, 2=y, 3=z axis
   periodic = T ! Is the system periodic along the y axes
   
   writeSnapshotVTK=F ! Save snapshots of the instantaneous fields

   ! Means file: column 1=y, 2=rho, 3=v_x, 4=v_y, 5=T, 6=c
   storeConserved = F ! Leave at F
   writeMeansVTK = F ! Write the means to a VTK file

   ! Variances
   writeVariancesVTK = F ! Should we save a VTK file
   nVariances = 0 ! How many co-variances to calculate and save
   variancePairs = ""
      ! species1 variable1 species2 variable2
   
   ! Static structure factors
   writeSpectrumVTK = F
   writeAbsValue = F ! Only write absolute values of complex values to VTK file?
   writeTheory = -1 ! Also write: -1=Projections onto discrete modes, 0=Continuum theory, 1=MAC theory
   nStructureFactors = 0
   structureFactorPairs = ""

   ! Dynamic structure factors:
   nWavenumbers=0
   ! Shape (3,nWavenumbers):
   selectedWavenumbers=""
   nSavedSnapshots=1000
   
/

========================================================================
This was compared and tested against IBAMR library, see input file below
========================================================================

// Solves fluct NS equation for velocity first over one time step for u:
// du/dt + grad(pi) + u*grad(u) = eta*Lap(u) + stoch - gamma*c*g_hat
// div(u) = 0
// where gamma is a gravity-like constant, and g_hat=(0,1) in 2D and (0,0,1) in 3D.
// After velocity solver completes we then solve
// dc/dt + u*grad(c) + div(u_s*c) = kappa*Lap(c) + stoch
// where u_s is an analytically-prescribed 'Soret' advection field
// The div(u_s*c) term is handled implicitly, while u*grad(c) is handled explicitly

SEED = 0                             // RNG seed (zero for clock)

// Units are:
// Length=cm, Time=s, Temperature=K, mass=gr

// System size:
//----------------
LY = 0.153                            // Height of box
THICKNESS = 1                    // Thickness of sample in z direction (in 2D)
ASPECT = 1                          // Aspect ratio (length/height)

// Discretization parameters:
//----------------
PERIODIC = 0 // Is y axes periodic
NY = 64                              // Grid size y axis
CFL = 0.125 // Diffusive CFL number (determines time step)

N_STEPS = 250001                       // Number of time steps
N_STEPS_POST = 4                    // How often to do HydroGrid analysis
N_STEPS_SNAPSHOT = 0             // How often to write out HydroGrid results
N_STEPS_SKIP =    50000                // How many steps to skip initially
N_STEPS_CHECK = 500                  // How often to print statistics
PROJECT_Y = FALSE                    // Analyze projection along y
N_STEPS_DUMP = 0 // How often IBAMR dumps hydrodynamic variables to disk

// physical parameters
//----------------

C_AV = 0.5 // Average concentration
C_VAR = 0 // Scale for equilibrium concentration fluctuations

NU = 1.89E-2 // Kinematic viscosity
KAPPA = 6.3E-6 // Diffusion coefficient

kT = 4.1145E-14  // Temperature
RHO = 0.8416 // Density
MOLMASS = 2.4726E-22 // Molecular mass

SORET = 9.6E-3 // Soret coefficient
DTEMP = 16 // Temperature differential

EXPANSION = 0.2362 // Solutal expansion coefficient beta
GRAVITY = 981 // Gravitational constant

// Form of the equations being solved:
//----------------
CREEPING_FLOW = TRUE                // Exclude v*grad(v) term?
INCLUDE_CONCENTRATION = TRUE         // Include c?
INCLUDE_CONVECTIVE_TRANSPORT = TRUE  // Include v*grad(c) term?
INCLUDE_SORET_TRANSPORT = FALSE      // Include v_s*grad(c) term?
STOCH_FORCING_C = "C*(1-C)"          // Form of the concentration stochastic forcing concentration-dependent prefactor
INCLUDE_BOUSSINESQ_FORCING = TRUE   // Include gravity f = -gamma*c in momentum equation?

// Derived quantities:
//----------------
DZ = THICKNESS // In 2D

MU = RHO*NU // Shear viscosity
BOUSSINESQ_FORCING_GAMMA = RHO*EXPANSION*GRAVITY

// Fluctuation magnitude (standard deviation relative to physical):
STD_U = sqrt(kT / DZ) // Velocities  = sqrt(k_B*T/dz)
STD_C = sqrt(C_VAR*MOLMASS / RHO / DZ) // Concentration = sqrt(M/rho/dz)
VARIANCE = 1.0 // Extra scaling of spectra in HydroGrid

// Box size:
LX = ASPECT*LY
NX = ASPECT*NY
DX=LX/NX
DY=LY/NY

// Time step (kept constant)
DT = CFL*DY^2 / KAPPA

// Soret stuff:
GRADT =  (1-PERIODIC) * DTEMP  / (NY*DY) // Temperature gradient
SGTL = SORET*GRADT*NY*DY
C_AV_COEFF = ( PERIODIC==1 ? 1.0 : SGTL / (1-exp(-SGTL)))
U_SORET = -KAPPA*SORET*GRADT

GRADC = -C_AV*(1-C_AV)*SORET*GRADT // Concentration gradient at boundaries

// Boundary conditions at top/bottom walls
//----------------
// Used for initialization even if periodic in y
V_BOTTOM=0
V_TOP=0

C_BOTTOM = C_AV - GRADC*LY/2
C_TOP = C_AV + GRADC*LY/2

//---------------------------------------------------------

Main {
// log file parameters
   log_file_name    = "EARTH-SORET-dynamic-2d.log"
   log_all_nodes    = FALSE
   nml_file = "EARTH-SORET-dynamic-2d.nml"

// visualization dump parameters
   viz_writer            = "VisIt"
   viz_dump_interval     = N_STEPS_DUMP           // zero to turn off
   viz_dump_dirname      = "VisitIBAMR"
   visit_number_procs_per_file = 1

// restart dump parameters
   restart_interval      = 0            // zero to turn off
   restart_write_dirname = "RestartIBAMR"

// timer dump parameters
   timer_dump_interval   = 0            // zero to turn off

// postprocessing (HydroGridAnalysis) parameters
   postprocess_interval = N_STEPS_POST  // zero to turn off
   snapshot_interval = N_STEPS_SNAPSHOT // How many time steps to average statistics over
   iteration_skip = N_STEPS_SKIP        // How many steps to skip in the beginning
   check_interval = N_STEPS_CHECK       // How often to print some expectation values
   project_y_axis = PROJECT_Y           // Also analyze projection (average) along y
}

CartesianGeometry {
   domain_boxes = [ (0, 0) , (NX - 1, NY - 1) ]
   x_lo         =  0   , 0              // lower end of computational domain.
   x_up         =  LX, LY           // upper end of computational domain.
   periodic_dimension = 1, PERIODIC
}

//---------------------------------------------------------
// Initial conditions

// Linear velocity profile along y (shear):
VelocityInitialConditions {
   n = NY
   v1 = V_TOP
   v0 = V_BOTTOM
   function_0 = "v0 + (v1-v0)*X_1/n"
   function_1 = "0.0"
}

ConcentrationInitialConditions {
   n = NY
   dy = DY
   c1 = C_TOP
   c0 = C_BOTTOM
   c_av = C_AV
   c_av_coeff = C_AV_COEFF
   SGT = SORET*GRADT
   periodic = PERIODIC
   
   width = 1.0 // Initial width of interface
   
   // Constant profile:
   //function = "c_av"
   
   // Linear profile:
   function = "c0 + (c1-c0)*X_1/(n*dy)"

}

PressureInitialConditions {
   function = "0"
}

//---------------------------------------------------------
// Additional terms in equation:

// Soret velocity u_s is constant here
SoretVelocityFunction {
   u_soret = U_SORET
   function_0 = "0.0"
   function_1 = "u_soret"
}

ForcingFunction { // Additional forcing in concentration equation
   function_0 = "0.0"
}

// Algorithmic controls
//----------------

// The advection-diffusion concentration solver and the Navier-Stokes solver are completely separate
// Notably, they can use different number of cycles.

// The options for viscous and diffusive time_stepping are:
// "FORWARD_EULER" or "BACKWARD_EULER" for num_cycles=1
// "TRAPEZOIDAL_RULE"="CRANK_NICOLSON" for num_cycles=1 or 2
// Options for advective time stepping:
// "ADAMS_BASHFORTH", "FORWARD_EULER" for num_cycles=1 or 2
// "TRAPEZOIDAL_RULE" or "MIDPOINT_RULE" for num_cycles=2
// The Soret advective term div(u_s*c) timestepping can be:
// "FORWARD_EULER", "BACKWARD_EULER", "TRAPEZOIDAL_RULE" (midpoint not presently supported for num_cycles>1)

SORET_TIME_STEPPING_TYPE = "TRAPEZOIDAL_RULE"
SORET_CONVECTIVE_OP = "CENTERED"
SORET_DIFFERENCE_FORM = "CONSERVATIVE" // div(u_s*c)
// For overdamped dynamics this needs to be false:
CENTER_U_ADV_DIFF = FALSE

INSStaggeredHierarchyIntegrator {
   num_cycles           = 2
   viscous_time_stepping_type    = "BACKWARD_EULER" // "TRAPEZOIDAL_RULE"
   convective_time_stepping_type = "MIDPOINT_RULE"
   convective_op_type            = "CENTERED"
   convective_difference_form    = "CONSERVATIVE"
   init_convective_time_stepping_type = "EULER"

   //rho                  = RHO // Time-dependent case
   rho                  = 0 // Steady Stokes case

   mu                   = MU
   creeping_flow        = CREEPING_FLOW
   normalize_pressure   = TRUE // Must be set to FALSE for normal stress BCs!
   normalize_velocity   = (PERIODIC==1) // Must be set to true for periodic BCs
   start_time           = 0.0e0
   end_time             = (N_STEPS+N_STEPS_SKIP)*DT
   cfl                  = 100
   dt_max               = DT
   grow_dt              = 1.0e0
   max_integrator_steps = 10000000
   regrid_interval      = 10000000
   enable_logging       = FALSE
   output_U             = TRUE
   output_P             = FALSE
   output_F             = FALSE
   output_Q             = FALSE
   output_Omega         = FALSE
   output_Div_U         = FALSE
   
   // Krylov Stokes solver controls (optimized for steady Stokes flow):
   // -------------------------------
   // max_iterations   = maximum number of solver/preconditioner
   //                    iterations per solve; actual number of
   //                    iterations may be less
   // rel_residual_tol = stop when |r_k| < tol*|b|; unless modified to
   //                    stop when |r_k| < tol*min(|b|,|r_0|)
   // abs_residual_tol = stop when |r_k| < tol
   //
   // NOTE: PETSc solvers are all configurable at the command line; run
   //       with -help to see list of all options.  Command line options
   //       should take precedence over options set in this input file
   //       (if they don't, this is a bug that should be reported).

   stokes_solver_type = "PETSC_KRYLOV_SOLVER"
   stokes_solver_db {
      ksp_type = "gmres"  // "gmres", "fgmres" or "richardson"
      max_iterations = 50
      rel_residual_tol = 1.0e-9
      abs_residual_tol = 0.0
   }

   stokes_precond_type = "PROJECTION_PRECONDITIONER"
   stokes_precond_db {
      // no options to set for projection preconditioner
   }
   
   velocity_solver_type = "HYPRE_LEVEL_SOLVER"
   // Pure geometric MG (buggy for more then one V-cycle!)
   velocity_solver_db {
      solver_type       = "Split" // Split vx / vy / vz blocks
      split_solver_type = "PFMG" // Use hypre PFMG MG on the blocks
      enable_logging    = FALSE
      max_iterations    = 1 // Only works with a single multigrid cycle per iteration
      rel_residual_tol  = 1.0e-16
      abs_residual_tol     = 0
   }

   pressure_solver_type = "HYPRE_LEVEL_SOLVER"
   pressure_solver_db {
      solver_type          = "PFMG"
      num_pre_relax_steps  = 2
      num_post_relax_steps = 2
      enable_logging       = FALSE
      max_iterations       = 1 // Only a single multigrid cycle per iteration
      rel_residual_tol     = 1.0e-16
      abs_residual_tol     = 0
   }  
   
}

// For trapezoidal method:
INSStaggeredStochasticForcing {
   stress_tensor_type = "SYMMETRIC"
      // options are: "UNCORRELATED", "SYMMETRIC", and "SYMMETRIC_TRACELESS"
   velocity_bc_scaling = sqrt(2.0)
   traction_bc_scaling = 0.0
   std = STD_U

   // For trapezoidal:
   num_rand_vals = 1
   weights_0 = 1
   weights_1 = 1
}

AdvDiffSemiImplicitHierarchyIntegrator {
   diffusion_time_stepping_type  = SORET_TIME_STEPPING_TYPE
   convective_time_stepping_type = "MIDPOINT_RULE" // Must be midpoint for predictor-corrector in main_PC
   convective_op_type            = "CENTERED"
   convective_difference_form    = "CONSERVATIVE"
   convective_op_db {
      outflow_bdry_extrap_type = "NONE" // Outflow boundary handling: "NONE", "CONSTANT", "LINEAR", or "QUADRATIC"
   }
   init_convective_time_stepping_type = "FORWARD_EULER" // For Adams-Bashforth

   num_cycles           = 2
   start_time           = 0.0e0
   end_time             = (N_STEPS+N_STEPS_SKIP)*DT
   cfl                  = 10
   dt_max               = DT
   grow_dt              = 1.0e0
   max_integrator_steps = 10000000
   regrid_interval      = 10000000
   enable_logging       = FALSE

   helmholtz_solver_type = "PETSC_KRYLOV_SOLVER"
   helmholtz_solver_db {
      ksp_type = "gmres"
      max_iterations = 100      
   }

   helmholtz_precond_type = "HYPRE_LEVEL_SOLVER"
   helmholtz_precond_db {
      solver_type          = "PFMG"
      num_pre_relax_steps  = 2
      num_post_relax_steps = 2
      enable_logging       = FALSE
      max_iterations       = 1
      rel_residual_tol     = 1.0e-6
      abs_residual_tol     = 0
   }
}

// Note: The multiplicative stochastic forcing for concentration is handled in the corrector step as:
//  f(C(n))                   for FORWARD_EULER
//  f(0.5*C(n)+0.5*C(n+1)))   for MIDPOINT_RULE
//  0.5*(f(C(n))+f(C(n+1)))   for TRAPEZOIDAL_RULE
// This is not formally even first order accurate for truly multiplicative noise

// For trapezoidal:
AdvDiffStochasticForcing {
   f_expression = STOCH_FORCING_C // Amplitude of stochastic forcing
   dirichlet_bc_scaling = sqrt(2.0)
   neumann_bc_scaling = 0.0
   std = STD_C
   // For trapezoidal:
   num_rand_vals = 1
   weights_0 = 1
   weights_1 = 1
}

//---------------------------------------------------------
// Boundary conditions are specified using coefficients
// a, b and g at each non-periodic boundary.
// a*u + b*(du/dn) = g
// Here the normal vector goes into the boundary (away from the interior)
// e.g., at the lower y boundary n=(0 -1 0),
// a*u - b*du/dy = g
// but at the upper y boundary n=(0 1 0),
// a*u + b*du/dy = g
// The coefficients can be functions of space and time in general

// The boundaries are ordered as:
// 0 = x lower, 1 = x upper
// 2 = y lower, 3 = y upper
// 4 = z lower, 5 = z upper

// The normal vector goes into the boundary (away from the interior)
// e.g., at the lower y boundary n=(0 -1 0),
// but at the upper y boundary n=(0 1 0),
//---------------------------------------------------------

//---------------------------------------------------------
// Two types of boundary conditions are supported for N-S solver
// Either "velocity" or "traction" can be specified at the boundary:
//   a = 1 , b = 0 ===> u[d] = g
//   a = 0 , b = 1 ===> t[d] = g
//   any other combination of a and b = error
//   Here d is the component and
//   t = sigma*n is the traction vector at the boundary
//   where stress tensor sigma = -p*I+mu*(grad(u)+grad^T(u))

//   Only two BCs work with fluctuations for now
//   because only Dirichlet BCs for normal velocity are handled:
//   1. Stick or No-Slip walls: Normal and tangential velocity are constant
//   2. Slip walls: Normal velocity is constant and the tangential traction is zero
//   Since t_tan = mu*du_tan/dn = 0 this implies Neumann for tangential velocity

VelocityBcCoefs_0 { // Stick walls (vx)
   v1 = V_TOP
   v0 = V_BOTTOM

   acoef_function_0 = "1.0"
   acoef_function_1 = "1.0"
   acoef_function_2 = "1.0"
   acoef_function_3 = "1.0"

   bcoef_function_0 = "0.0"
   bcoef_function_1 = "0.0"
   bcoef_function_2 = "0.0"
   bcoef_function_3 = "0.0"

   gcoef_function_0 = "0.0"
   gcoef_function_1 = "0.0"
   gcoef_function_2 = "v0"
   gcoef_function_3 = "v1"
}

VelocityBcCoefs_1 { // Stick walls (vy)
   acoef_function_0 = "1.0"
   acoef_function_1 = "1.0"
   acoef_function_2 = "1.0"
   acoef_function_3 = "1.0"

   bcoef_function_0 = "0.0"
   bcoef_function_1 = "0.0"
   bcoef_function_2 = "0.0"
   bcoef_function_3 = "0.0"

   gcoef_function_0 = "0.0"
   gcoef_function_1 = "0.0"
   gcoef_function_2 = "0.0"
   gcoef_function_3 = "0.0"
}

//---------------------------------------------------------

// NOTE: BCs for concentration are specified in the mixed Neumman-Dirichlet (Robin) form:
// e.g., at the lower y boundary n=(0 -1 0),
// a*u - b*du/dy = g
// but at the upper y boundary n=(0 1 0),
// a*u + b*du/dy = g

ConcentrationBcCoefs { // Robin BCs
   grad_c = GRADC

   // x-axis
   acoef_function_0 = "0.0"
   acoef_function_1 = "0.0"
   bcoef_function_0 = "1.0"
   bcoef_function_1 = "1.0"
   gcoef_function_0 = "0.0"
   gcoef_function_1 = "0.0"

   // y-axis Neumann
   acoef_function_2 = "0"
   acoef_function_3 = "0"
   bcoef_function_2 = "1.0"
   bcoef_function_3 = "1.0"
   gcoef_function_2 = "-grad_c"
   gcoef_function_3 = "grad_c"
}

//---------------------------------------------------------
// Parallelization/gridding details

GriddingAlgorithm {
   max_levels = 1

   largest_patch_size {
      level_0 = 512, 512
   }

   smallest_patch_size {
      level_0 = 4,  4
   }
}

StandardTagAndInitialize {
   tagging_method = "GRADIENT_DETECTOR"
}

LoadBalancer {
   bin_pack_method     = "SPATIAL"
   max_workload_factor = 1
}

TimerManager{
   print_exclusive = FALSE
   print_total = TRUE
   print_threshold = 0.1

   timer_list = "IBAMR::*::*" , "IBTK::*::*" , "*::*::*"
}



