! debye ~ 8.2e-8
! time step contraints
! electro: 3.5e-10
! mass diff: 5.6e-12
! advective: 2e-9? (based on max_vel=10)


! WARNING: gfortran has shown some issues reading matrices of rank higher than 2 from namelists
! be careful and check values are read correctly (e.g., c_bc)

! Options for low Mach equations
&probin_common
 
  ! Problem specification
  !----------------------
  dim_in = 2                                  ! 2D or 3D  
  prob_lo(1:3) = 0.d0 0.d0 0.d0               ! physical lo coordinate
  prob_hi(1:3) = 2.636d-6 6.59d-7 2.059375d-8 ! physical hi coordinate

  n_cells(1:2) = 128 32                       ! number of cells in domain
  max_grid_size(1:2) = 32 32                  ! max number of cells in a box
  fixed_dt = 5.d-12                           ! time step (if positive, fixed)
  max_step = 10000                            ! maximum number of time steps
  plot_int = 100                              ! Interval for writing a plotfile (for visit/amrvis)

  n_cells(1:2) = 256 64                       ! number of cells in domain
  max_grid_size(1:2) = 64 64                  ! max number of cells in a box
  fixed_dt = 1.25d-12                         ! time step (if positive, fixed)
  max_step = 50000                            ! maximum number of time steps
  plot_int = 500                              ! Interval for writing a plotfile (for visit/amrvis)

  n_cells(1:2) = 512 128                      ! number of cells in domain
  max_grid_size(1:2) = 128 128                ! max number of cells in a box
  fixed_dt = 3.125d-13                        ! time step (if positive, fixed)
  max_step = 250000                           ! maximum number of time steps
  plot_int = 2500                             ! Interval for writing a plotfile (for visit/amrvis)

  ! Time-step control
  !----------------------

  ! Controls for number of steps between actions (for HydroGrid see below)
  !----------------------
  chk_int = -1                    ! Interval for writing a checkpoint
  prob_type = 2                   ! sets scalars, m, coefficients (see init.f90)
  restart = -1                    ! checkpoint restart number
  print_int = 10                  ! how often to output EOS drift and sum of conserved quantities
  project_eos_int = 1000          ! how often to call project_onto_eos

  ! Physical parameters
  !--------------------
  grav(1:2) = 0.d0 0.d0               ! gravity vector (negative is downwards)
  molmass(1:3) = 5.887d-23 5.887d-23 2.992d-23
  rhobar(1:3)  = 1.d0 1.d0 1.d0

  ! stochastic forcing amplitudes (1 for physical values, 0 to run them off)
  variance_coef_mom = 0.d0
  variance_coef_mass = 0.d0
  k_B = 1.38064852d-16       ! Boltzmann's constant


  ! Algorithm control / selection
  !----------------------
  algorithm_type = 0     ! differs from code to code.  In binary and multispcies code:
                         ! 0 = Inertial algorithm
                         ! 2 = Overdamped with 2 RNGs
                         ! 3 = Iterative implicit

   ! Controls for deciding whether to plot various quantities (eg averaged, time averaged)
   !----------------------
   plot_gradEpot =           T
   plot_umac_tavg =          T
   plot_Epot_tavg =          T
   plot_rho_tavg =           T

  ! random number seed
  ! 0        = unpredictable seed based on clock
  ! positive = fixed seed
  ! negative = (only for a restart) RNGs status is restored from checkpoint data
  use_bl_rng = T
  seed_momentum = 1
  seed_diffusion= 1
  seed_reaction = 1

  ! Viscous friction L phi operator
  ! if abs(visc_type) = 1, L = div beta grad
  ! if abs(visc_type) = 2, L = div [ beta (grad + grad^T) ]
  ! if abs(visc_type) = 3, L = div [ beta (grad + grad^T) + I (gamma - (2/3)*beta) div ]
  ! positive = assume constant coefficients
  ! negative = assume spatially-varying coefficients
  visc_type = 1
  visc_coef = 0.9d-2       ! momentum diffusion coefficient 'eta'   

  advection_type = 0 ! 0 = centered explicit
                     ! 1 = unlimited bilinear bds in space and time
                     ! 2 = limited bliniear bds in space and time
                     ! 3 = unlimited quadratic bds in space and time
                     ! 4 = limited quadratic bds in space and time

  ! Stochastic momentum flux controls:
  filtering_width = 0   ! If positive the *momentum* stochastic fluxes will be filtered (smoothed)
                        ! Stochastic *mass* fluxes are not filtered
  stoch_stress_form = 1 ! 0=nonsymmetric (div(v)=0), 1=symmetric (no bulk)

  ! Initial conditions
  !----------------------
  u_init(1:2) = 0.d0 0.d0  ! controls initial velocity
  smoothing_width = 0.d0   ! scale factor for smoothing initial profile
  initial_variance_mom = 0.d0   ! multiplicative factor for initial fluctuations
                            ! (if negative, total momentum is set to zero)

  ! Boundary conditions
  !----------------------
  ! BC specifications:
  ! -1 = periodic
  ! 100 = no-slip wall      (Dir condition for normal vel; Dir velocity condition for trans vel)
  ! 101 = no-slip reservoir (Dir condition for normal vel; Dir velocity condition for trans vel)
  ! 200 = slip wall         (Dir condition for normal vel; Dir traction condition for trans vel)
  ! 201 = slip reservoir    (Dir condition for normal vel; Dir traction condition for trans vel)
  ! For a complete list see bc.f90
  bc_lo(1:2) = -1 100   ! periodic on left, no slip on bottom 
  bc_hi(1:2) = -1 100   ! periodic on right, no slip on top

  ! Control for analyze_spectra.90 for calling HydroGrid
  !----------------------
  hydro_grid_int = 0    ! How often to call updateHydroGrid
                        ! 0 if never
                        ! negative for projectHydroGrid custom analysis
                        ! positive for updateHydroGrid

  project_dir = 0        ! Projection direction (1=x, 2=y, 3=z)
  ! Meaning: 0=analyze 3D data only (no projection needed for HydroGrid, 
  !          but still need projection if stats_int>0)
  ! +dim=project along dim then analyze 2D only,
  ! -dim=analyze 3D and then project along dim so we also analyze 2D data
  ! It is better to use the conserved variables but it does not quite work for staggered

  max_grid_projection(1:1) = 128 ! parallelization parameters
  stats_int = -1                 ! Project grid for analysis
                                 ! If positive, how often to compute mean and 
                                 ! standard deviation over reduced dimensions
  n_steps_save_stats = -1 ! How often to dump HydroGrid output files
  n_steps_skip = 0      ! How many steps to skip
  analyze_conserved = F   ! Should we use conserved variables for the analysis
                          ! (does not work well)
  center_snapshots = F    ! Should we use cell-centered momenta for the analysis
                          ! (will smooth fluctuations)

  nspecies = 3
/

&probin_chemistry

/

&probin_multispecies

  ! Physical properties:
  !----------------------
  fraction_tolerance = 1.d-14 ! For roundoff errors in mass and mole fractions
  start_time = 0.d0

  inverse_type = 1       ! Only for LAPACK:  1=inverse, 2=pseudo inverse
  correct_flux = T       ! Manually ensure mass is conserved to roundoff 
  print_error_norms = T
  is_ideal_mixture = T   ! If T assume Gamma=I (H=0) and simplify
  is_nonisothermal = F   ! If T Soret effect will be included
  use_lapack = F         ! Use LAPACK or iterative method for diffusion matrix (recommend False)
  chi_iterations = 10    ! number of iterations used in Dbar2chi_iterative
  
  ! Initial and boundary conditions 
  !----------------------
  T_init(1:2) = 300.d0 300.d0  ! initial values for temperature (bottom/top, inside/outside circle, etc.)
  temp_type = 0 ! for initializing temperature

  ! initial values for CONCENTRATIONS
  c_init(1,1:3) = 0.005 0.005 0.99
  c_init(2,1:3) = 0.005 0.005 0.99

  ! Thermodynamic and transport properties:
  !----------------------

  ! These are lower-triangules of symmetric matrices represented as vectors
  ! Number of elements is (nspecies*(nspecies-1)/2)
  ! The values are read row by row starting from top going down (this allows easy addition/deletion of new species/rows)
  ! So D_12; D_13, D_23; D_14, D_24, D_34; ...
  Dbar(1:3) = 1.55e-5 1.89e-5 1.89e-5

  plot_stag = F            ! plot staggered velocities in separate plotfile

/

&probin_charged
 
  use_charged_fluid = T
  print_debye_len = T
  dielectric_const = 708.01d-21
  charge_per_mass(1:3) = 2720.d0 -2720.d0 0.d0
  
  induced_charge_eo = T
  ac_iceo = F

  ! 1 = Dirichlet (fixed potential)
  ! 2 = Neumann (fixed charge density)
  Epot_wall_bc_type(1,2) = 1
  Epot_wall_bc_type(2,2) = 2
  Epot_wall(1,2) = 0.d0
  Epot_wall(2,2) = 0.d0

  ! zero out eps on portions of a Dirichlet face to mimic dphi/dn=0
  zero_eps_on_wall_type = 1
  zero_eps_on_wall_left_end = 0.40d0               ! eg if set to 0.25, then eps will be set to 0 on the wall from 0*Lx --> 0.25*Lx
  zero_eps_on_wall_right_start = 0.60d0            ! eg if set to 0.75, then eps will be set to 0 on the wall from 0.75*Lx --> 1.*Lx
  E_ext_type = 1
  E_ext_value(1:2) = -1.5d9  0.d0
  E_ext_value(1:2) = -1.5d10 0.d0
  E_ext_value(1:2) = -1.5d11 0.d0
  E_ext_value(1:2) = -7.5d11 0.d0
  E_ext_value(1:2) = -1.5d12 0.d0
  E_ext_value(1:2) = -2.5d12 0.d0
  E_ext_value(1:2) = -3.0d12 0.d0
  E_ext_value(1:2) = -5.0d12 0.d0
  E_ext_value(1:2) = -1.0d13 0.d0
  E_ext_value(1:2) = -1.5d13 0.d0
/

! Stokes solver for velocity
&probin_gmres

  ! preconditioner type
  ! 1 = projection preconditioner
  !-1 = projection preconditioner with expensive pressure update
  ! 2 = lower triangular preconditioner
  !-2 = lower triangular preconditioner with negative sign
  ! 3 = upper triangular preconditioner
  !-3 = upper triangular preconditioner with negative sign
  ! 4 = Block diagonal preconditioner
  !-4 = Block diagonal preconditioner with negative sign
  precon_type = 1

  ! weighting of pressure when computing norms and inner products
  p_norm_weight = 1.d0

  ! scale theta_alpha, beta, gamma, and b_u by this, and then scale x_p by the inverse
  scale_factor = 1.d0

  ! MAC projection solver parameters:
  mg_verbose = 0        ! multigrid verbosity
  cg_verbose = 0        ! BiCGStab (mg_bottom_solver=1) verbosity
  mg_max_vcycles = 1    ! maximum number of V-cycles
  mg_minwidth = 2       ! length of box at coarsest multigrid level
  mg_bottom_solver = 4  ! bottom solver type
                        ! 0 = smooths only, controlled by mg_nsmooths_bottom
                        ! 1 = BiCGStab
                        ! 4 = Fancy bottom solve that coarsens down additionally
                        !     and then applies mg_nsmooths_bottom smooths
  mg_nsmooths_down = 2       ! number of smooths at each level on the way down
  mg_nsmooths_up = 2         ! number of smooths at each level on the way up
  mg_nsmooths_bottom = 8     ! number of smooths at the bottom (only if mg_bottom_solver=0)
  mg_max_bottom_nlevels = 10 ! for mg_bottom_solver=4, number of additional levels of multigrid
  mg_rel_tol = 1.d-10        ! relative tolerance stopping criteria

  ! Staggered multigrid solver parameters
  stag_mg_verbosity = 0       ! verbosity (set to 1 for debugging the gmres solver!)
  stag_mg_max_vcycles = 1     ! max number of v-cycles
  stag_mg_minwidth = 2        ! length of box at coarsest multigrid level
  stag_mg_bottom_solver = 4   ! bottom solver type
                              ! 0 = smooths only, controlled by mg_nsmooths_bottom
                              ! 4 = Fancy bottom solve that coarsens additionally
                              !     and then applies stag_mg_nsmooths_bottom smooths
  stag_mg_nsmooths_down = 2   ! number of smooths at each level on the way down
  stag_mg_nsmooths_up = 2     ! number of smooths at each level on the way up
  stag_mg_nsmooths_bottom = 8 ! number of smooths at the bottom
  stag_mg_max_bottom_nlevels = 10 ! for stag_mg_bottom_solver=4, number of additional levels of multigrid
  stag_mg_omega = 1.d0        ! weighted-jacobi omega coefficient
  stag_mg_smoother = 1        ! 0 = jacobi; 1 = 2*dm-color Gauss-Seidel
  stag_mg_rel_tol = 1.d-10    ! relative tolerance stopping criteria

  ! GMRES solver parameters
  gmres_rel_tol = 1.d-9 ! relative tolerance stopping criteria
  gmres_abs_tol = 0.d0  ! absolute tolerance stopping criteria
  gmres_verbose = 0     ! gmres verbosity; if greater than 1, more residuals will be printed out
  gmres_max_outer = 20  ! max number of outer iterations
  gmres_max_inner = 5   ! max number of inner iterations, or restart number
  gmres_max_iter = 100  ! max number of gmres iterations
  gmres_min_iter = 1    ! min number of gmres iterations

/
