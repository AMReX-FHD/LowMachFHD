
&probin_common

  ! Problem specification
  !----------------------
  dim_in = 2                            ! 2D or 3D  
  prob_type = 18                         ! const conc grad along y (see src_lowMach/init_lowmach.f90)
  prob_lo(1:3) = 0.    0.    0.         ! physical lo coordinate
  ! prob_hi(1:3) = 2.56e-5 2.56e-5 2.56e-3      ! physical hi coordinate
  !prob_hi(1:3) = 0.32e-5 0.32e-5 .5d-7      ! physical hi coordinate
    prob_hi(1:3) = 0.64-5 0.64-5 1.d-7      ! physical hi coordinate
  !n_cells(1:2) = 256 256
  !n_cells(1:2) = 128 128
  n_cells(1:2) = 64 64
  max_grid_size(1:3) = 32 32

  ! Time-step control
  !----------------------
  !fixed_dt = 2.e-13                         ! time step (if positive, fixed)
  fixed_dt = 8.e-12                         ! time step (if positive, fixed)
  cfl = 0.5                             ! advective cfl number (used if fixed_dt<0) to determine time step

  ! Controls for number of steps between actions (for HydroGrid see below)
  !----------------------
  max_step = 50000                    ! maximum number of time steps
  plot_int = 100                       ! Interval for writing a plotfile (for visit/amrvis)
  plot_shifted_vel = T
  chk_int = 100                          ! Interval for writing a checkpoint
  restart =  -1
  print_int = 1                         ! how often to output EOS drift and sum of conserved quantities
  project_eos_int = 10                  ! how often to call project_onto_eos

  ! Physical parameters
  !--------------------
  grav(1:3) = 0. 0.              ! gravity vector (negative is downwards)
  nspecies = 2
  molmass(1:2) = 2.4d-22 2.4d-22
  rhobar(1:2) = 1.38 1.38                   ! pure component densities for all species (chosen from EOS)
  rho0 = 1.38

  ! stochastic forcing amplitudes (1 for physical values, 0 to run them off)
  variance_coef_mom = 1.                ! global scaling epsilon for stochastic momentum forcing
  variance_coef_mass = 1.               ! global scaling epsilon for stochastic mass forcing
  k_B = 1.3806488d-16                              ! Boltzmann's constant

  ! Algorithm control / selection
  !----------------------
  algorithm_type = 6                    ! 0 = Inertial algorithm (trapezoidal)
                                        ! 2 = Overdamped with 2 RNGs
                                        ! 3 = iterative
                                        ! 4 = imp_bousq
                                        ! 5 = Inertial algorithm (midpoint)
                                        ! 6 = Boussinesq

  ! Random number generator
  !----------------------
   use_bl_rng = T                        ! if T, use F_BaseLib/bl_random RNGs
                                        ! if F, use HydroGrid RNGs

  ! if use_bl_rng=T, assign random number seeds for each physical process
  ! for positive value, the value is assigned as seed value
  ! for 0, a positive value is randomly chosen
  ! if -1 (only for restart), RNGs status is restored from checkpoint data
  seed_momentum = 1
  seed_diffusion = 1
  seed_reaction = 1
  seed_init_mass = 1
  seed_init_momentum = 1
  !seed_momentum = 37
  !seed_diffusion = 37
  !seed_reaction = 37
  !seed_init_mass = 37
  !seed_init_momentum = 37

  ! Viscous friction L phi operator
  ! if abs(visc_type) = 1, L = div beta grad
  ! if abs(visc_type) = 2, L = div [ beta (grad + grad^T) ]
  ! if abs(visc_type) = 3, L = div [ beta (grad + grad^T) + I (gamma - (2/3)*beta) div ]
  ! positive = assume constant coefficients
  ! negative = assume spatially-varying coefficients
  visc_type = 1
  visc_coef = 270.d0                        ! momentum diffusion coefficient 'eta'   

  advection_type = 0                    ! 0 = centered explicit
                                        ! 1 = unlimited bilinear bds in space and time
                                        ! 2 = limited bliniear bds in space and time
                                        ! 3 = unlimited quadratic bds in space and time

  ! Stochastic momentum flux controls:
  filtering_width = 0                   ! If positive the *momentum* stochastic fluxes will be filtered (smoothed)
                                        ! Stochastic *mass* fluxes are not filtered
  stoch_stress_form = 1                 ! 0=nonsymmetric (div(v)=0), 1=symmetric (no bulk)

  ! Initial conditions
  !----------------------
  initial_variance_mom = 0.             ! multiplicative factor for initial fluctuations
                                        ! (if negative, total momentum is set to zero)

  ! Boundary conditions
  !----------------------
  ! BC specifications:
  ! -1 = periodic
  ! 100 = no-slip wall      (Dir condition for normal vel; Dir velocity condition for trans vel)
  ! 101 = no-slip reservoir (Dir condition for normal vel; Dir velocity condition for trans vel)
  ! 200 = slip wall         (Dir condition for normal vel; Dir traction condition for trans vel)
  ! 201 = slip reservoir    (Dir condition for normal vel; Dir traction condition for trans vel)
  ! For a complete list see bc.f90
  bc_lo(1:3) = -1 -1 -1
  bc_hi(1:3) = -1 -1 -1

  ! Control for analyze_spectra.90 for calling HydroGrid
  !----------------------
  hydro_grid_int = 1                   ! How often to call updateHydroGrid
                                        ! 0 if never
                                        ! negative for projectHydroGrid custom analysis
                                        ! positive for updateHydroGrid

  project_dir = 0                       ! Projection direction (1=x, 2=y, 3=z)
  ! Meaning: 0=analyze full grid data only (no projection needed for HydroGrid, 
  !          but still need projection if stats_int>0)
  ! +dim=project along dim then analyze 2D only,
  ! -dim=analyze full grid using HydroGrid and then project along dim so we also analyze projections
  ! It is better to use the conserved variables but it does not quite work for staggered

  max_grid_projection(1:2) = 32 32      ! parallelization parameters
  stats_int = 0                         ! Project grid for analysis (writes hstat and vstat files)
                                        ! If positive, how often to compute mean and 
                                        ! standard deviation over reduced dimensions
  n_steps_save_stats = -1               ! How often to dump HydroGrid output files
  !n_steps_skip = 30000                  ! How many steps to skip > L^2/(chi*dt)
  n_steps_skip = 10000                  ! How many steps to skip > L^2/(chi*dt)
  analyze_conserved = F                 ! Should we use conserved variables for the analysis
                                        ! (does not work well)
  center_snapshots = F                  ! Should we use cell-centered momenta for the analysis
                                        ! (will smooth fluctuations)

/

&probin_multispecies

  ! Physical properties:
  !----------------------
  is_ideal_mixture = F                  ! If T assume Gamma=I (H=0) and simplify
  is_nonisothermal = F                  ! If T Soret effect will be included

  avg_type = 10

  use_multiphase = .true.
  ! alpha_gex = 3.
  !alpha_gex = 3.d6
  !n_gex = 8
  ! alpha_gex = 250000.d0
  ! n_gex = 6
  !alpha_gex = 23437.5d0
  !n_gex = 4
  !alpha_gex = 1464.84
  !n_gex = 1
  !alpha_gex = 2929.69
  !n_gex = 2
  alpha_gex = 0.
  n_gex = 2

  ! kc_tension = 1.d-11
   kc_tension = 0.d-11
  
  ! Thermodynamic and transport properties:
  !----------------------
  
  ! These are lower-triangles of symmetric matrices represented as vectors
  ! Number of elements is (nspecies*(nspecies-1)/2)
  ! The values are red row by row starting from top going down (this allows easy addition/deletion of new species/rows)
  ! So D_12; D_13, D_23; D_14, D_24, D_34; ...
  ! Dbar(1) = 1.d-1                          ! Maxwell-Stefan diffusion constant  
  Dbar(1) = 5.0d-8                          ! Maxwell-Stefan diffusion constant  

  ! Algorithmic options:
  !----------------------
  fraction_tolerance = 1.d-16           ! For roundoff errors in mass and mole fractions
  use_lapack = F                        ! Use LAPACK or iterative method for diffusion matrix (recommend False)
  inverse_type = 1                      ! Only for LAPACK:  1=inverse, 2=pseudo inverse
  correct_flux = T                      ! Manually ensure mass is conserved to roundoff 
  
  ! Initial and boundary conditions 
  !----------------------
  ! T_init(1:2) = 273.15 273.15                   ! initial values for temperature (bottom/top, inside/outside circle, etc.)
  T_init(1:2) = 300. 300.

  ! initial values for w
  ! These are MASS FRACTIONS (concentrations), not partial densities
  c_init(1,1:2) = 0.5 0.5
  c_init(2,1:2) = 0.5 0.5
 
/

&probin_charged


   use_charged_fluid = F
  ! dielectric_const = 6.91d-19    ! relative permitivity ~ 78, vacuum permitivity ~ 8.854d-21
  dielectric_const = 9.2d-20    ! relative permitivity ~ 78, vacuum permitivity ~ 8.854d-21
  charge_per_mass(1:2) = 6.8d2  -6.8d2
  !charge_per_mass(1:2) = 0.d2  -0.d2

  ! 1 = Dirichlet (fixed potential)
  ! 2 = Neumann (fixed charge density)
!  Epot_wall_bc_type(1,2) = 1
!  Epot_wall_bc_type(2,2) = 1
!  Epot_wall(1,2) = 0.d0
!  Epot_wall(2,2) = 0.d0

  ! 1 = Dirichlet (fixed potential)
  ! 2 = Neumann (fixed charge density)
  Epot_wall_bc_type(1,2) = 2
  Epot_wall_bc_type(2,2) = 2
  !Epot_wall(1,2) = 389001448.167d0
  !Epot_wall(2,2) = 389001448.167d0
  Epot_wall(1,2) = 389001450.485d0
  Epot_wall(2,2) = 389001450.485d0

! E_ext_type = 0
! E_ext_value(1:2) = 0.d11 0.d0


/

&probin_chemistry

  nreactions = 0

/

! Stokes solver for velocity
&probin_gmres

  ! preconditioner type
  ! 1 = projection preconditioner
  !-1 = projection preconditioner with expensive pressure update
  ! 2 = lower triangular preconditioner
  !-2 = lower triangular preconditioner with negative sign
  ! 3 = upper triangular preconditioner
  !-3 = upper triangular preconditioner with negative sign
  ! 4 = Block diagonal preconditioner
  !-4 = Block diagonal preconditioner with negative sign
  precon_type = 1

  ! weighting of pressure when computing norms and inner products
  p_norm_weight = 1.

  ! scale theta_alpha, beta, gamma, and b_u by this, and then scale x_p by the inverse
  scale_factor = 1.

  ! MAC projection solver parameters:
  mg_verbose = 0                        ! multigrid verbosity
  cg_verbose = 0                        ! BiCGStab (mg_bottom_solver=1) verbosity
  mg_max_vcycles = 1                    ! maximum number of V-cycles
  mg_minwidth = 2                       ! length of box at coarsest multigrid level
  mg_bottom_solver = 4                  ! bottom solver type
                                        ! 0 = smooths only, controlled by mg_nsmooths_bottom
                                        ! 1 = BiCGStab
                                        ! 4 = Fancy bottom solve that coarsens down additionally
                                        !     and then applies mg_nsmooths_bottom smooths
  mg_nsmooths_down = 2                  ! number of smooths at each level on the way down
  mg_nsmooths_up = 2                    ! number of smooths at each level on the way up
  mg_nsmooths_bottom = 8                ! number of smooths at the bottom (only if mg_bottom_solver=0)
  mg_max_bottom_nlevels = 10            ! for mg_bottom_solver=4, number of additional levels of multigrid
  mg_rel_tol = 1.e-9                    ! relative tolerance stopping criteria

  ! Staggered multigrid solver parameters
  stag_mg_verbosity = 0                 ! verbosity (set to 1 for debugging the gmres solver!)
  stag_mg_max_vcycles = 1               ! max number of v-cycles
  stag_mg_minwidth = 2                  ! length of box at coarsest multigrid level
  stag_mg_bottom_solver = 4             ! bottom solver type
                                        ! 0 = smooths only, controlled by mg_nsmooths_bottom
                                        ! 4 = Fancy bottom solve that coarsens additionally
                                        !     and then applies stag_mg_nsmooths_bottom smooths
  stag_mg_nsmooths_down = 2             ! number of smooths at each level on the way down
  stag_mg_nsmooths_up = 2               ! number of smooths at each level on the way up
  stag_mg_nsmooths_bottom = 8           ! number of smooths at the bottom
  stag_mg_max_bottom_nlevels = 10       ! for stag_mg_bottom_solver=4, number of additional levels of multigrid
  stag_mg_omega = 1.                    ! weighted-jacobi omega coefficient
  stag_mg_smoother = 1                  ! 0 = jacobi; 1 = 2*dm-color Gauss-Seidel
  stag_mg_rel_tol = 1.e-9               ! relative tolerance stopping criteria

  ! GMRES solver parameters
  gmres_rel_tol = 1.e-16                 ! relative tolerance stopping criteria
  gmres_abs_tol = 0.                    ! absolute tolerance stopping criteria
  gmres_verbose = 0                     ! gmres verbosity; if greater than 1, more residuals will be printed out
  gmres_max_outer = 10                  ! max number of outer iterations
  gmres_max_inner = 10                  ! max number of inner iterations, or restart number
  gmres_max_iter = 100                  ! max number of gmres iterations
  gmres_min_iter = 1                    ! min number of gmres iterations

/

! HydroGrid spectral and other analysis
!---------------------------------------
! The variables are numbered as:
! 3D: 1=rho, 2-4=v, 5=T, 6 onward=rho_1-rho_n or w_1-w_n
! 2D: 1=rho, 2-3=v, 4=T, 5 onward=rho_1-rho_n or w_1-w_n
! Means file:
! 1=y, 2=rho, 3-5=v, 6=T, 7+=rho's or w's in 3D
! 1=y, 2=rho, 3-4=v, 5=T, 6+=rho's or w's in 2D
! Variance file:
! 1=y, 2=w1-w2, 3=w1-w3, 4=w2-w3
! Structure factor numbering:
! 1=w1-w2, 2=w1-w3, 3=w2-w3

&hydroAnalysisOptions
! 2D full grid data
! NOTE: This namelist will be ignored if project_dir>0

   staggeredVelocities = 0              ! Are velocities on a staggered grid or not, (0, +1, or -1)*h/2
   storeConserved = F                   ! We are not using conserved variables here due to staggering

   ! Save the flow to a VTK file:
   writeMeansVTK = F                    ! Save the means over the averaging interval
   writeSnapshotVTK = F                 ! Save snapshots of the instantaneous fields

   ! Variances
   writeVariancesVTK = T                ! Should we save a VTK file
   nVariances = 2
   variancePairs = "0 5 0 5, 0 5 0 6"
      ! species1 variable1 species2 variable2

   ! Static structure factors
   writeSpectrumVTK = T
   subtractMeanFT = F                   ! The means are trivial here so no need to estimate them
   writeAbsValue = F                    ! Only write absolute values of complex values to VTK file?
   writeTheory = -1                     ! Write the theoretical prediction (-1=none, 0==continuum or 1=MAC)
   nStructureFactors = 2
   structureFactorPairs = "0 5 0 5, 0 5 0 6"


   ! Dynamic structure factors:
   nWavenumbers=0
   ! Shape (2,nWavenumbers):
   selectedWavenumbers=""
   nSavedSnapshots=2000                 ! Maximum time in S(k,t) will be (nSavedSnapshots/2)*dt*hydro_grid_int
      
   outputFolder = "."
   filePrefix = "INS"
   axisToPrint = 2                      ! 1=x, 2=y, 3=z axis
   periodic = T                         ! Is the system periodic along the y axes
/

! NOT USED HERE AFTER !

&hydroAnalysisOptions
! 2D grid after vertical projection (corresponds to vstat files)
! NOTE: This namelist will be ignored if project_dir=0

   staggeredVelocities = 0              ! Are velocities on a staggered grid or not, (0, +1, or -1)*h/2
   storeConserved = F                   ! We are not using conserved variables here due to staggering

   ! Save the flow to a VTK file:
   writeMeansVTK = F                    ! Save the means over the averaging interval
   writeSnapshotVTK = F                 ! Save snapshots of the instantaneous fields

   ! Variances
   writeVariancesVTK = F                ! Should we save a VTK file
   nVariances = 0
   ! 1=rho-rho, 2=w1-w1, 3=w2-w2, 4=w3-w3, 5=w1-w2, 6=w1-w3, 7=w2-w3
   variancePairs = "0 1 0 1, 0 5 0 5, 0 6 0 6, 0 7 0 7, 0 5 0 6, 0 5 0 7, 0 6 0 7"
      ! species1 variable1 species2 variable2

   ! Static structure factors
   writeSpectrumVTK = F
   subtractMeanFT = F                   ! The means are trivial here so no need to estimate them
   writeAbsValue = T                    ! Only write absolute values of complex values to VTK file?
   writeTheory = -1                     ! Write the theoretical prediction (-1=none, 0==continuum or 1=MAC)
   nStructureFactors = 0
   structureFactorPairs = "0 1 0 1, 0 5 0 5, 0 6 0 6, 0 7 0 7, 0 5 0 6, 0 5 0 7, 0 6 0 7"

   ! Dynamic structure factors:
   nWavenumbers=0
   ! Shape (2,nWavenumbers):
   selectedWavenumbers=""
   nSavedSnapshots=200
      
   outputFolder = "."
   filePrefix = "INS_dynamic_vstat"
   axisToPrint = 1 ! 1=x, 2=y, 3=z axis
   periodic = T ! Is the system periodic along the y axes
/

&hydroAnalysisOptions
! 1D grid after horizontal projection (corresponds to hstat files)
! NOTE: This namelist will be ignored if project_dir=0

   staggeredVelocities = 0              ! Are velocities on a staggered grid or not, (0, +1, or -1)*h/2
   storeConserved = F                   ! We are not using conserved variables here due to staggering

   ! Save the flow to a VTK file:
   writeMeansVTK = F                    ! Save the means over the averaging interval
   writeSnapshotVTK = F                 ! Save snapshots of the instantaneous fields


   ! Variances
   writeVariancesVTK = T                ! Should we save a VTK file
   nVariances = 2
   variancePairs = "0 5 0 5, 0 5 0 6"

      ! species1 variable1 species2 variable2

   ! Static structure factors
   writeSpectrumVTK = T
   subtractMeanFT = F                   ! The means are trivial here so no need to estimate them
   writeAbsValue = F                    ! Only write absolute values of complex values to VTK file?
   writeTheory = -1                     ! Write the theoretical prediction (-1=none, 0==continuum or 1=MAC)
   nStructureFactors = 2
   structureFactorPairs = "0 5 0 5, 0 5 0 6"


   ! Dynamic structure factors:
   nWavenumbers=0
   ! Shape (2,nWavenumbers):
   selectedWavenumbers=""
   nSavedSnapshots=100
      
   outputFolder = "."
   filePrefix = "dynamic_hstat"
   axisToPrint = 1 ! 1=x, 2=y, 3=z axis
   periodic = T ! Is the system periodic along the y axes
/
